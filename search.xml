<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>快速排序算法</title>
    <url>/2019/11/25/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<ul>
<li>快速排序实际上是基于一种二分思想</li>
<li>时间复杂度：O(NlogN)</li>
<li>在处理基准数的左右两边的序列时，用到了递归。<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quicksort</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, t, temp;</span><br><span class="line">    <span class="keyword">if</span> (left &gt;= right)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    temp = a[left]; <span class="comment">// temp存储基准数</span></span><br><span class="line">    i = left;</span><br><span class="line">    j = right;</span><br><span class="line">    <span class="keyword">while</span> (i != j)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 顺序很重要，要从右往左找</span></span><br><span class="line">        <span class="keyword">while</span> (a[j] &gt;= temp &amp;&amp; i &lt; j)</span><br><span class="line">            j--;</span><br><span class="line">        <span class="comment">// 再从左往右找</span></span><br><span class="line">        <span class="keyword">while</span> (a[i] &lt;= temp &amp;&amp; i &lt; j)</span><br><span class="line">            i++;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (i &lt; j)</span><br><span class="line">        &#123;</span><br><span class="line">            t = a[i];</span><br><span class="line">            a[i] = a[j];</span><br><span class="line">            a[j] = t;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 最终将基准数归位</span></span><br><span class="line">    a[left] = a[i];</span><br><span class="line">    a[i] = temp;</span><br><span class="line"></span><br><span class="line">    quicksort(a, left, i - <span class="number">1</span>);  <span class="comment">// 递归处理基准数右边</span></span><br><span class="line">    quicksort(a, i + <span class="number">1</span>, right);  <span class="comment">// 递归处理基准数左边</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">100</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line"></span><br><span class="line">    quicksort(a, <span class="number">0</span>, n - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出排序后的结果</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; a[i];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>快速排序</tag>
      </tags>
  </entry>
  <entry>
    <title>迷宫问题</title>
    <url>/2019/11/24/%E8%BF%B7%E5%AE%AB%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<ul>
<li>问题描述：给定迷宫（可以为二维数组0-1矩阵），求从起点到目标点路径并求最短步长）</li>
</ul>
<h3 id="DFS解决"><a href="#DFS解决" class="headerlink" title="DFS解决"></a>DFS解决</h3><ul>
<li>深度优先搜索模型可参考博客：<a href="http://www.zonepg.com/2019/11/24/DFS%E8%A7%A3%E5%86%B3%E5%85%A8%E6%8E%92%E5%88%97%E9%97%AE%E9%A2%98/#more" target="_blank" rel="noopener" title="DFS">DFS解决全排列问题</a>.<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, min_d = <span class="number">99999999</span>;</span><br><span class="line"><span class="keyword">int</span> p, q;   <span class="comment">// 目标点坐标</span></span><br><span class="line"><span class="comment">// nextPos为行进方向</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> nextPos[<span class="number">4</span>][<span class="number">2</span>] = &#123; &#123;<span class="number">0</span>, <span class="number">1</span>&#125;,  <span class="comment">// 向右走</span></span><br><span class="line">                   &#123;<span class="number">1</span>, <span class="number">0</span>&#125;,  <span class="comment">// 向下走</span></span><br><span class="line">                   &#123;<span class="number">0</span>, <span class="number">-1</span>&#125;, <span class="comment">// 向左走</span></span><br><span class="line">                   &#123;<span class="number">-1</span>, <span class="number">0</span>&#125;, <span class="comment">// 向上走</span></span><br><span class="line">                 &#125;;</span><br><span class="line"><span class="comment">// 数组a为地图，数组book记录已走过的点</span></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">50</span>][<span class="number">50</span>], book[<span class="number">50</span>][<span class="number">50</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> <span class="built_in">step</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 到达目标殿</span></span><br><span class="line">    <span class="keyword">if</span> (x == p &amp;&amp; y == q)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 输出可行路径</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++)</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; book[i][j];</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"step="</span> &lt;&lt; <span class="built_in">step</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 更新最短步长</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">step</span> &lt; min_d)</span><br><span class="line">        &#123;</span><br><span class="line">            min_d = <span class="built_in">step</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 枚举四种走法</span></span><br><span class="line">    <span class="keyword">int</span> tx, ty, k;</span><br><span class="line">    <span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; <span class="number">4</span>; ++k)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 计算下一个点的坐标</span></span><br><span class="line">        tx = x + nextPos[k][<span class="number">0</span>];</span><br><span class="line">        ty = y + nextPos[k][<span class="number">1</span>];</span><br><span class="line">        <span class="comment">// 判断是否越界</span></span><br><span class="line">        <span class="keyword">if</span> (tx &lt; <span class="number">0</span> || tx &gt; n<span class="number">-1</span> || ty &lt; <span class="number">0</span> || ty &gt; m - <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span> (!a[tx][ty] &amp;&amp; !book[tx][ty])</span><br><span class="line">        &#123;</span><br><span class="line">            book[tx][ty] = <span class="number">1</span>;   <span class="comment">// 标记该点已走过</span></span><br><span class="line">            dfs(tx, ty, <span class="built_in">step</span> + <span class="number">1</span>);  <span class="comment">// 开始尝试下一个点</span></span><br><span class="line">            book[tx][ty] = <span class="number">0</span>;   <span class="comment">// 尝试结束，取消该点标记</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> startx, starty;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"迷宫的行数与列数："</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"读入迷宫："</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; m; j++)</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; a[i][j];</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"读入起点和终点坐标："</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; startx &gt;&gt; starty &gt;&gt; p &gt;&gt; q;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从起点开始搜索</span></span><br><span class="line">    book[startx][starty] = <span class="number">1</span>;   <span class="comment">// 标记已在路径中</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"可行路线为："</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    dfs(startx, starty, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"最短步数："</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; min_d;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="BFS解决"><a href="#BFS解决" class="headerlink" title="BFS解决"></a>BFS解决</h3><ul>
<li>广度优先搜索思想是通过“一层一层”扩展的方法来寻求目标点，扩展时发现一个点就将这个点加入到队列中，直至找到目标点。<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">50</span>][<span class="number">50</span>], book[<span class="number">50</span>][<span class="number">50</span>];</span><br><span class="line"><span class="keyword">int</span> nextPos[<span class="number">4</span>][<span class="number">2</span>] = &#123;</span><br><span class="line">        &#123; <span class="number">0</span>, <span class="number">1</span> &#125;,   <span class="comment">// 向右走</span></span><br><span class="line">        &#123; <span class="number">1</span>, <span class="number">0</span> &#125;,   <span class="comment">// 向下走</span></span><br><span class="line">        &#123; <span class="number">0</span>, <span class="number">-1</span> &#125;,   <span class="comment">// 向左走</span></span><br><span class="line">        &#123; <span class="number">-1</span>, <span class="number">0</span> &#125;,  <span class="comment">// 向上走</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">note</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x;  <span class="comment">// 横坐标</span></span><br><span class="line">    <span class="keyword">int</span> y;  <span class="comment">// 纵坐标</span></span><br><span class="line">    <span class="keyword">int</span> f;  <span class="comment">// 父亲在队列中的编号</span></span><br><span class="line">    <span class="keyword">int</span> s;  <span class="comment">// 步数</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">note</span> <span class="title">que</span>[2500];</span></span><br><span class="line"><span class="keyword">int</span> head, tail;</span><br><span class="line"><span class="keyword">int</span> startx, starty, p, q, tx, ty, flag, m, n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (head &lt; tail)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;= <span class="number">3</span>; k++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 计算下一个点的坐标</span></span><br><span class="line">            tx = que[head].x + nextPos[k][<span class="number">0</span>];</span><br><span class="line">            ty = que[head].y + nextPos[k][<span class="number">1</span>];</span><br><span class="line">            <span class="comment">// 判断是否越界</span></span><br><span class="line">            <span class="keyword">if</span> (tx &lt; <span class="number">0</span> || tx &gt; n - <span class="number">1</span> || ty &lt; <span class="number">0</span> || ty &gt; m - <span class="number">1</span>)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="comment">// 判断是否是障碍物或者已经在路径中</span></span><br><span class="line">            <span class="keyword">if</span> (!a[tx][ty] &amp;&amp; !book[tx][ty])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 把这个点标记为已经走过</span></span><br><span class="line">                <span class="comment">// 注意宽搜每个点只入队一次，所以和深搜不同，不需要将book还原</span></span><br><span class="line">                book[tx][ty] = <span class="number">1</span>;</span><br><span class="line">                <span class="comment">// 插入点到新的队列中</span></span><br><span class="line">                que[tail].x = tx;</span><br><span class="line">                que[tail].y = ty;</span><br><span class="line">                que[tail].f = head;</span><br><span class="line">                que[tail].s = que[head].s + <span class="number">1</span>;</span><br><span class="line">                tail++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 如果到目标点了，停止扩展，任务结束，退出循环</span></span><br><span class="line">            <span class="keyword">if</span> (tx == p &amp;&amp; ty == q)</span><br><span class="line">            &#123;</span><br><span class="line">                flag = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (flag)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="comment">// 当一个点扩展结束后，head++才能呢个对后面的点再进行扩展</span></span><br><span class="line">        head++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; m &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; a[i][j];</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"输入起点与终点坐标："</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; startx &gt;&gt; starty &gt;&gt; p &gt;&gt; q;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 往队列插入迷宫入口坐标</span></span><br><span class="line">    que[tail].x = startx;</span><br><span class="line">    que[tail].y = starty;</span><br><span class="line">    que[tail].f = <span class="number">-1</span>;</span><br><span class="line">    que[tail].s = <span class="number">0</span>;</span><br><span class="line">    tail++;</span><br><span class="line">    book[startx][starty] = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 从起点开始搜索</span></span><br><span class="line">    bfs(startx, starty);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"最短路径长为："</span> &lt;&lt; que[tail<span class="number">-1</span>].s;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"回溯路径："</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = tail - <span class="number">1</span>; i &gt; <span class="number">0</span>;)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"("</span> &lt;&lt; que[i].x &lt;&lt; <span class="string">", "</span> &lt;&lt; que[i].y &lt;&lt; <span class="string">")"</span>&lt;&lt; <span class="string">"&lt;-"</span>;</span><br><span class="line">        i = que[i].f;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"("</span> &lt;&lt; que[<span class="number">0</span>].x &lt;&lt; <span class="string">", "</span> &lt;&lt; que[<span class="number">0</span>].y &lt;&lt; <span class="string">")"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Depth First Search, DFS</tag>
        <tag>Breadth First Search, BFS</tag>
      </tags>
  </entry>
  <entry>
    <title>DFS解决全排列问题</title>
    <url>/2019/11/24/DFS%E8%A7%A3%E5%86%B3%E5%85%A8%E6%8E%92%E5%88%97%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h3 id="深度优先搜索模型"><a href="#深度优先搜索模型" class="headerlink" title="深度优先搜索模型"></a>深度优先搜索模型</h3><ul>
<li>理解深度优先搜索的关键在于解决“当下该如何做”。至于“下一步如何做”则与“当下该如何做是一样的”。</li>
<li>下面的代码是深度优先搜索的基本模型<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> <span class="built_in">step</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    判断边界</span><br><span class="line">    尝试每一种可能 <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        继续下一步 dfs(<span class="built_in">step</span>+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    返回 <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="输出1～n的全排列"><a href="#输出1～n的全排列" class="headerlink" title="输出1～n的全排列"></a>输出1～n的全排列</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>], book[<span class="number">10</span>], n, count;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> <span class="built_in">step</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="comment">// 到了第n + 1步，则表示前 n 个数已排列好一次，输出序列</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">step</span> == n + <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; a[i];</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        count++;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 此时为第 step 步</span></span><br><span class="line">    <span class="comment">// 按照1～n的顺序一一尝试</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 判断该数是否已经在序列中</span></span><br><span class="line">        <span class="comment">// book[i] == 0表示数 i 未在序列中</span></span><br><span class="line">        <span class="keyword">if</span> (!book[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 将 i 放入序列中</span></span><br><span class="line">            a[<span class="built_in">step</span>] = i;</span><br><span class="line">            <span class="comment">// 标记为 1，表示 i 已进入序列</span></span><br><span class="line">            book[i] = <span class="number">1</span>;</span><br><span class="line">            <span class="comment">// 开始处理下一个位置</span></span><br><span class="line">            dfs(<span class="built_in">step</span> + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 这是非常重要的一步，一定要将已经进入序列的 i 收回，才能进行下一次尝试</span></span><br><span class="line">            book[i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    dfs(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"一共有"</span> &lt;&lt; count &lt;&lt; <span class="string">"种排列方式"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Depth First Search, DFS</tag>
      </tags>
  </entry>
  <entry>
    <title>火柴棍问题</title>
    <url>/2019/11/24/%E7%81%AB%E6%9F%B4%E6%A3%8D%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<ul>
<li>题目：现在有m(m&lt;=24)根火柴棍，拼出A+B=C的等式。</li>
<li>注意：<ol>
<li>加号与等号各自需要两根火柴棍</li>
<li>A不等于B,则A+B=C与B+A=C是为不同的等式</li>
<li>所有火柴棍必须都用上</li>
</ol>
</li>
<li>分析：m &lt;= 24，除去‘+’，‘=’占用的四根火柴，还剩下20根火柴，最多可以有20个1。因此，A、B、C任何一个数都不能超过1111<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 一个函数，返回某个数对应的火柴数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">0</span>;    <span class="comment">// 用来计数的变量</span></span><br><span class="line">    <span class="comment">// 用一个数组来记录0-9每个数字需要用多少根火柴棍</span></span><br><span class="line">    <span class="keyword">int</span> f[<span class="number">10</span>] = &#123;<span class="number">6</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">6</span>&#125;;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        num += f[x % <span class="number">10</span>];</span><br><span class="line">        x /= <span class="number">10</span>;</span><br><span class="line">    &#125; <span class="keyword">while</span> (x);</span><br><span class="line">    <span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a, b, c, m, sum = <span class="number">0</span>; <span class="comment">// m为火柴棍的个数，sum是等式成立数量</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; m;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (a = <span class="number">0</span>; a &lt;= <span class="number">1111</span>; a++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (b = <span class="number">0</span>; b &lt;= <span class="number">1111</span>; b++)</span><br><span class="line">        &#123;</span><br><span class="line">            c = a + b;</span><br><span class="line">            <span class="keyword">if</span> (fun(a) + fun(b) + fun(c) == m<span class="number">-4</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="string">'+'</span> &lt;&lt; b &lt;&lt; <span class="string">'='</span> &lt;&lt; c &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">                sum++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"一共可以拼出"</span> &lt;&lt; sum &lt;&lt; <span class="string">"个不同的等式"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>枚举</tag>
      </tags>
  </entry>
  <entry>
    <title>11-24</title>
    <url>/2019/11/24/11-24/</url>
    <content><![CDATA[<p>这的确很难，但还是要向前看</p>
<p>蜕下这层皮，会长出新肉</p>
]]></content>
      <categories>
        <category>growth record</category>
      </categories>
      <tags>
        <tag>技术之外的东西</tag>
      </tags>
  </entry>
  <entry>
    <title>NexT主题添加一些特效</title>
    <url>/2019/11/18/NexT%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E4%B8%80%E4%BA%9B%E7%89%B9%E6%95%88/</url>
    <content><![CDATA[<h3 id="设置动态背景"><a href="#设置动态背景" class="headerlink" title="设置动态背景"></a>设置动态背景</h3><ul>
<li>主题配置文件内置4种特效，设置成ture就行。<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Canvas-nest</span></span><br><span class="line"><span class="attr">canvas_nest:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># three_waves</span></span><br><span class="line"><span class="attr">three_waves:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># canvas_lines</span></span><br><span class="line"><span class="attr">canvas_lines:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># canvas_sphere</span></span><br><span class="line"><span class="attr">canvas_sphere:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="添加点击爱心效果"><a href="#添加点击爱心效果" class="headerlink" title="添加点击爱心效果"></a>添加点击爱心效果</h3><ol>
<li>在<code>/themes/next/source/js/src</code>下新建文件 clicklove.js，把如下代码粘贴到clicklove.js文件中：<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">!<span class="function"><span class="keyword">function</span>(<span class="params">e,t,a</span>)</span>&#123;<span class="function"><span class="keyword">function</span> <span class="title">n</span>(<span class="params"></span>)</span>&#123;c(<span class="string">".heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: '';width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;"</span>),o(),r()&#125;<span class="function"><span class="keyword">function</span> <span class="title">r</span>(<span class="params"></span>)</span>&#123;<span class="keyword">for</span>(<span class="keyword">var</span> e=<span class="number">0</span>;e&lt;d.length;e++)d[e].alpha&lt;=<span class="number">0</span>?(t.body.removeChild(d[e].el),d.splice(e,<span class="number">1</span>)):(d[e].y--,d[e].scale+=<span class="number">.004</span>,d[e].alpha-=<span class="number">.013</span>,d[e].el.style.cssText=<span class="string">"left:"</span>+d[e].x+<span class="string">"px;top:"</span>+d[e].y+<span class="string">"px;opacity:"</span>+d[e].alpha+<span class="string">";transform:scale("</span>+d[e].scale+<span class="string">","</span>+d[e].scale+<span class="string">") rotate(45deg);background:"</span>+d[e].color+<span class="string">";z-index:99999"</span>);requestAnimationFrame(r)&#125;<span class="function"><span class="keyword">function</span> <span class="title">o</span>(<span class="params"></span>)</span>&#123;<span class="keyword">var</span> t=<span class="string">"function"</span>==<span class="keyword">typeof</span> e.onclick&amp;&amp;e.onclick;e.onclick=<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;t&amp;&amp;t(),i(e)&#125;&#125;<span class="function"><span class="keyword">function</span> <span class="title">i</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">var</span> a=t.createElement(<span class="string">"div"</span>);a.className=<span class="string">"heart"</span>,d.push(&#123;<span class="attr">el</span>:a,<span class="attr">x</span>:e.clientX<span class="number">-5</span>,<span class="attr">y</span>:e.clientY<span class="number">-5</span>,<span class="attr">scale</span>:<span class="number">1</span>,<span class="attr">alpha</span>:<span class="number">1</span>,<span class="attr">color</span>:s()&#125;),t.body.appendChild(a)&#125;<span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">var</span> a=t.createElement(<span class="string">"style"</span>);a.type=<span class="string">"text/css"</span>;<span class="keyword">try</span>&#123;a.appendChild(t.createTextNode(e))&#125;<span class="keyword">catch</span>(t)&#123;a.styleSheet.cssText=e&#125;t.getElementsByTagName(<span class="string">"head"</span>)[<span class="number">0</span>].appendChild(a)&#125;<span class="function"><span class="keyword">function</span> <span class="title">s</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span><span class="string">"rgb("</span>+~~(<span class="number">255</span>*<span class="built_in">Math</span>.random())+<span class="string">","</span>+~~(<span class="number">255</span>*<span class="built_in">Math</span>.random())+<span class="string">","</span>+~~(<span class="number">255</span>*<span class="built_in">Math</span>.random())+<span class="string">")"</span>&#125;<span class="keyword">var</span> d=[];e.requestAnimationFrame=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;setTimeout(e,<span class="number">1e3</span>/<span class="number">60</span>)&#125;&#125;(),n()&#125;(<span class="built_in">window</span>,<span class="built_in">document</span>);</span><br></pre></td></tr></table></figure></li>
<li>在<code>\themes\next\layout\_layout.swig</code>文件末尾添加：<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 页面点击小红心 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"/js/src/clicklove.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>NexT配置</tag>
      </tags>
  </entry>
  <entry>
    <title>使用NexT主题遇到的坑</title>
    <url>/2019/11/18/%E4%BD%BF%E7%94%A8NexT%E4%B8%BB%E9%A2%98%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/</url>
    <content><![CDATA[<h3 id="菜单栏显示与连接问题"><a href="#菜单栏显示与连接问题" class="headerlink" title="菜单栏显示与连接问题"></a>菜单栏显示与连接问题</h3><p>昨天晚上发现，自己的菜单栏图标显示有问题，但若在/next的_congfig.yml文件下按照官方document那样设置，图标确实能正常显示。但是，发现点进某一个选项链接会出现Cannot GET /home/%20/这样的错误。<br>找了两小时bug，无奈上床准备休息睡觉。睡前刷一会知乎，搜到这个问题，发现居然是配置的时候多了空格，%20也就是空格的意思。阿，感谢知乎！<br>如下为正确配置方式，在/next/_config.yml文件下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/||home</span></span><br><span class="line">  <span class="attr">about:</span> <span class="string">/about||user</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">/tags||tags</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="string">/categories||th</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">/archives||archive</span></span><br><span class="line"><span class="comment">#  schedule: /schedule||calendar</span></span><br><span class="line"><span class="comment">#  sitemap: /sitemap.xml || sitemap</span></span><br><span class="line"><span class="comment">#  commonweal: /404/ || heartbeat</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Enable/Disable menu icons.</span></span><br><span class="line"><span class="attr">menu_icons:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>不要有空格！不要有空格！！不要有空格！！！</p>
<h3 id="旁注栏post链接错误"><a href="#旁注栏post链接错误" class="headerlink" title="旁注栏post链接错误"></a>旁注栏post链接错误</h3><p>旁注栏的post与菜单栏的Archives图标不相容bug</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>踩坑记</tag>
      </tags>
  </entry>
  <entry>
    <title>关于我</title>
    <url>/2019/11/17/%E5%85%B3%E4%BA%8E%E6%88%91/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="enter password" />
    <label for="hbePass">enter password</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="d8f61471154fd0e1626d339b81eea882a5273331cc68f05cd3db424d1967a8be">3b5e622537bcd34cbe0cce8e753a2d5e1e9a9543bd85669171f7ce177fcf9e32b1e3f837f6d5c6f26bab8e28cb5cb5ed258e0db62106f9237a5722d8684a6a88bbe2e013c19bcb80146255c4ea0b0cb3c09f0d3103a908be7d780c016bf3c2f5723f1f86a75ff9ecfeea0584a4d4e7fd5e02a5bec17eea88d22afa6e2e66f31bb538d2107888d655a5ccf6b38e6551c9766f0f2637f29e5877230b5e26cf95c5fd71521b0054c8ce5036cd6cd9a4579856b846ba2a5570fadb6a9e58915305c815defcc8e19d555e0c42b75c633c5ee5628e1f8add04a1e8db894d843ad8a61c53dc144ccdbfffb6d6632195f2c00d5a395f118d888665761bae5b17cc9ebf34053f98216dea5d07419c396c9cdb4a94b348900e2b8d26c314b94976d74e65d7e40b02c518e77e59379ac998c97f84060b02516623d4439359ae89e1ecf9b08e98c507458c5e69bd6abef478010607250707ae31c3676c95192368a53434c76c89c2269f343296160924a1dab8c19f2a04d865d44d0f488ade03665e6b36488b854f717e35e64565170728d89250ac886b9abd310f10fcc046cfcda90a3805ba1b737e1fb42793071ccb7af4cf660dfe564253e7ae60fbd92fabb0ef3717f2e84e1197e7db0718568c320e6ab4ad340baf04d7028716cc474e8aa6808d2da98fc23340247b63f80d18836a0bd2624df1bf6d5011c3d7e11d52bf7155a22b986f5794eec66aeae648b1d5e859a4dc6f2aec7d2664b2cef4afa013ced69f83cbf2f498bc411ce18b6f7355704f02f7faf1dc04b937a4731ccc91fc80f6a8f2b9be01322c49b949e8f8fc9c81bd9244c6e25f00adc0eaa588f88725b6590e0994a289803b5f5c1a55b902e51a5828d23432f555f903724e3a34d43328497c0a289bda5a59652ca02a8667fb7af3de6c77a8c71b1cbea9cc1e66c9f539acfa81dd4612c25db4f470b43e81c5dc78a93ff3b2778168ce941815af86b5e4d6fb08081c4734626ecf3851556905bdd247ed7ede4e6d41a894f98a4eb2d71face49d8bc82999fda7b69a0d6bfcde30ab9af947b14cc762b05bd6c225bcf345b0457a9076b96873303ed1044f27fe93dca14282c09eb7a8e824263a976540345eb3c35a6b4b1eba9a3f52cc5dc434daf7796fbc2b50a0cc374616e59fbb68fad21b65f3a4027608b5d10a60418d26de593997865d4ec1164963a21418bdb7dda0f152fc34467c8ed08fd347367edef12788474fccb289921220ff03bf651a26ddac9f7c4b66786127f3adba9f789fcfc2cc8a9b1870e256323c3bb57295c00646b1bf6d83b02652ad3dc0bfb9b1ec63e226506c62d61e28feedfd95a2282ae8babae478d7214e45f47db60f5f4630ce7f3f3195c67494cb4f08f379ffe241712641d8550a0733454015768c0d882859d362ce8e234a153d3ddb0124d5c92c6f2d8c0288c499277a46d106c9aac83550013402a8f27fa0a478adec4b09f08df1a9a8a42ff02b4e3d7ad0d1947adbbee1df2b6f8a6a9ed9ecc9e67f2d5d32b19b46007171ff8cfba8baff3edcb105ea68cd37716cc9f4c1bb523bec8771b0bfdecc423b53822d07feef6e5c0c1ba7734b6db30c2252a761a20dc887888887d516890c1c9f1e15227ee97e8fe1e9421c193e291cd1a66326e1e50d95d43ca059413d97990dca7dd9a568c080d23c3aa3f11b1ff7453346584865c307a2950ba7a025492da00cd7a0d9907353c5a1947df35b2ca78c8178648265c17269f339ec494e66f3d3ae85693808ea2c56a7903cac03f8b9296f5e86b89ba846ffbf7f033778550808f579d8f43f422281c516095351b4a4e4bbd333cb624d419d6551e0a875c5313e5464805a115575c52409f4696500c55b8594d578937af8ee6328bcaf7c1dd5dec177a99de091a546b0e734d0808eb96b3bcc6fa4a265af7c3e7cf9314b507281dcd620fed9ea8c77b820cc7f660f6fc5d3264555597ea726052c252333c6cf3d34ddb8b7a6b9afa7b9ca73896ee1d6f43b33e598c4d0f7ead66caf14dd8de8bc2eac78944cafb3dc25027f6657d5bd104e9e23cb928024d30f719be931ce10f434f742b22c17029faeb89cbef8d7a09ab95dc4181928a064297d5327e19f91812a4a835005313afa1c0e5aca3981cf08dd1d4c184d2b74f4887d679a46c63a0d1e5672388812a098e461fb880aa3f85f643e8cf16b7d349d5622ecd7436996722828bcc1cebf893cf59b9c99ffdf0a39066ac9e8e394446c65ea24f981d11b59cd431aef723a7f454e34714c51e0143d62752734660c6843ae04afaec7a420c23410466383a6c901840fdf38a130aeddda2251a30d52fe675baa920dc434f7227273bd19af821af1c63762ad4d0eeb57fd37fc0e404d85a1ab737d57aec298c8a31e44ae7616de5edffd5050463124e3d9147009a263cc36d6bfe62d4b3f11463dc9601dd1a5d4612f6d29f01489415d30797beabebf45998da96632fd50b127982093332a4a597fff3773c7fcaf1485e344f00fed2ceb09d20d0ed338e29d32b4ee3b702e1180932131ce48e4c5c26b07c6c4eb0d34a1dcfa2889d34171439a581aa359b7da0a3357110632f1b28760381df1c78da2637d8dcdc2cf42dd2ea74346ad196470dd23990c8616826472e35119737fa44dababa4bdd55d24ffd78f3d89c9132ae976d8854ff41ca20f9908b7bd309fd371dbd6bf4db7ce7d21af2bdf24151cf8dacf07be933b91b9fb22acef4ab23c07fac129aebfce046ad5cea2d0a187c9b1348c562b3d3d6dccad5d48063030db1825e657e725949d1c72a747753456e621cd5726463cbec73c46b28f095d37394b594c5f02280a98bd591f4eaef6fd0f2eaa6d2f51a2ecf0af19313b94cc5b6718a03c7f6a456cc225adc27d15a72d110c6008b32481d25cde62656b74c5d9032f9253b56e75458957e7b139c0c66580c3c805ef80d91b2ce9b4a043e9391f83cc5cb37b459ae770ada0bef84266e9c2eec0eb2bb1d23e37ecf2b308ce6118f1c0e82d3962202d14f02b07d28c1f43e58d6e28a1c8c06d539b02f8fa35ae0be4207a5855a8ed96f10050c16fb4b9b9be5790bf666b4823cf7a28ed5a7a8986bd1defe6225a7dec10b5f3e847072880527d5af708a3f3d71522db6990515696263934ee6888f74da39313f5463143481a0b6a032f5c50fe9be64bd16be512c9540a90508d6557e569b99ce0407d8848f49e6bdfab2b8402840c3a2cfe517b19e9990a5f24f66ca51d9d67be003dd5b6d616f1a749424fa83bdfe451908057766e75798abe4eff9740413901840bc2dd27ca77a46262d830fb1b4b0a27418cf2679756cb9d7ee1ee8f259a07fb76da437bf31d0defa275d99bbffcf9d371b8e69faa6ab286febc5fd17386c84da31fc7ef27a209b74486f0c4e6de5e172a4ac378d0243a9db36d0fc43288041f0a31527c923746bcb634a99f2c9244ee166aaa68194292adc84606672b034eb29d8f5d99c09a7f8b76537040fa41c8150b12abc65f1ca79b02701926c0b4c0a9a78fba2a13ca1ef9798031c6c6092fc0aea901a54120fb0a712d7fc276a4f52df5127f40b711b372cbe9f9e8cd94932ea81fccef7f3636aa56c63ae72b7166f3fe6888dd3d0996311ff38b27428b7b795d7113baa01a7240815cdc03aa57774099989148c2159d260b9fa6353a630410d980102862cdf144f4cc6bf03fad8c73e7d9d9ce18308891bc4ef4fa576265a76586b061bc481b7c2f237a014f8d895404228bfd622872358b9beda2cf36891a2aaec0501adbc219ec0ec8fcfcc2e8e94e524db1b34f258e970cee91db0b1d3c205b97b9755acc76410701dd5aadf7eee4a08a1bd381938bd59624fc7dd6f222367ea0bc4cc76745e3a678f5afc6b7c3f9dc9261aabc696b65f3fed3e37a4857084f286dc5b53be71de56bdec1bf5b7bbf4265acc32d06fb95ab75b409d0c25a30dba5c75cbceb2421268bce87733fcb06ad3672ace6adaebfa52ef00a8fd392dc3e33ca76c922a60c7567752543d2a151fbced49671e8cdfeb81f600f99b06491eb6c1775f8972f662140630a04658484437fef50aebcdae7399740289a56fdd72da8174f150360209a5e5018e615f6b03d680bd0312dbf366ba12aa0bd091856033ee0c7a5cd1592b1af4cdd63fc2b74c2cf7dfefd4a4a8f8c72ea9967392a7418e0e1a1cc62bf914558da9579490a0ee791014747403d9067e36ab32c39848a251cc4a332c4e44f181ddabc655f56bfe66ba27f3ae9261456d7287f02d34e5e9e7604c66357bb435413ac1f40dd800e31a92344c3795d67b5b1f12c2fd155f82e8a5536fd16986a15926b5f65902c74210b73c73d302baa3538659e15ee079d7b30adad50b2cda68db3358aacc2445c25054f69ea406171d4b1e03d2c1451cd44a1a6aa7c7e30ae96d5ed718065ae0a83d8b265067f5f2799ac974e4ab3af57dab33405b4da4abe81206f51b4ed0ce0d015facfdc6c6342aea0238da599503e62ffb07f7851eec95b644e17609b623c92f6d24969ef05c250cb287b241d6e8ebc4ac9b23b0a9aada4b326a4fe3ddef32ae9fb882d0ac0c4f8e3896f5bae3e1789ab2ff9e22865901f0a21ed6d8047c0c2a70d1dd82150ec1c068b61efab3ef766fa935e0125ac16f0fdb54306bca09ad62f24c94bf96ab0580aa82f377660163fbbe988bda456528f406d4d3bad9d6f076a6786d75e414441410cd988a95a077347711fe1ead603d930ceae0661b1ff05f1855b1c83710740c221bee94652c12126d116302cc4c51472666e1ab473789aab0e55e2664d0bd9b1bc2ca5439a52ec3dda86a8a94ab2c45b3979975162d7a215f93426415b53d6d3d86048f0016cc729ed9171a879ca432ec2f48ffff5df0840fa1f45521c8c7745d13bb85ad5f5d02d26ab1e291e4de6ac033118c5a7789fa135038e45acf28a01dd8ca1166275482a5b7f21eb0fd94e23c977ece7364c6f289274ec18f360440bfa11c4d0bc26e7d45c624059540931f97242ba9733104453473e2f1cd7b6d69e677438fe013359ee6f0f41a65c90394201de323f2987b49d57eb697be892df8b3349229af5a05e0621dda1b72803f11552dfe6644e53905ae5e41209195a2ebb5e4f0c00670192b82843fd629527628816eb85db30d46f4f5c8cac80648488102a593333d2aadb245f15ea0b771a31d59a92d7efb2d2493242cfb48da54be8ae14e8ddb57f1554d1b237391c05873246b07c49e6418315e1b446825af328aa82cffa0da3290902ba775ceda94625a02d96058fd0fcefc222bed91324bb83c036677ff6137b17da958816ba19049a8fd14ff5e0a1d4f1c872416aa1904e629f53374f935a132b8c5759f813a4d65a6a291e1bc877b4afb8a2320e3581ebe9fe3ac640255a1e177ca6a5b888d4ed35db0df78807275736f067772bb264e583ac9ab119410cc0ea1d43cbd4c0ea26bd9c542746662c71d05c7b6917ac84302e73d0289f1aa6fd6a18308805f6d2de0427b5d2f85a433fe674839bcf0f5b9bded2e595dc4dbccb080246267f933d848765245a12198fe1854a1ba2658d9f43aafac787499ba6fa6304501c22c8f96b5ba2c5c44b058c8ecf7f83f22c6d5b870fe3f8bedf6c007136dbd2aca00fbb98a6e58fea805974291d</script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>growth record</category>
      </categories>
      <tags>
        <tag>技术之外的东西</tag>
      </tags>
  </entry>
</search>
