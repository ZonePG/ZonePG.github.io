<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>寻找两个有序数组的中位数</title>
    <url>/2020/01/26/%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/</url>
    <content><![CDATA[<p>这是leetcode第五题</p>
<h5 id="算法思路"><a href="#算法思路" class="headerlink" title="算法思路"></a>算法思路</h5><ol>
<li>特判，当 s 的长度为 1 或者 0 时，返回 s。</li>
<li>初始化最长回文子串的开始索引start和最长长度max = 1</li>
<li>初始化dp数组，为n*n，dp[i][j]表示s(i~j)是否为回文串。</li>
<li>初始化dp<ul>
<li>dp[i][i] = 1，表示单个字符一定是回文串</li>
<li>若 i &lt; n - 1 &amp;&amp; s[i] == s[i+1]，表示相邻的字符相同。则dp[i][i+1] = True，并更新最长回文子串的开始索引start=i和长度max=2</li>
</ul>
</li>
<li>此时，从长度 sub_len=3 开始遍历，遍历区间[3, n]，表示所有最长子串可能的长度。因为长度1和2的已经在上一步完成了。对于可能的长度sub_len:<ul>
<li>从索引 i = 0 开始遍历，遍历区间，保证 i+sub_len-1 &lt; len为不越界条件</li>
<li>令子串右侧索引 j = i + sub_len - 1，若满足s[i]==s[j]&amp;&amp;dp[i+1][j-1]==1。表示子串为回文且s[i]==s[j]，说明s(i~j)也是回文。则此时，更新dp[i][j] = 1，并且更新start=i, max = sub_len。</li>
</ul>
</li>
<li>返回s(start~start+max-1)。<h5 id="c-实现代码"><a href="#c-实现代码" class="headerlink" title="c++实现代码"></a>c++实现代码</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">longestPalindrome</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = s.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span> (len == <span class="number">0</span> || len == <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> s;</span><br><span class="line">        <span class="keyword">int</span> start = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> <span class="built_in">max</span> = <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; dp(len, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(len));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            dp[i][i] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (i &lt; len - <span class="number">1</span> &amp;&amp; s[i] == s[i+<span class="number">1</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                start = i;</span><br><span class="line">                <span class="built_in">max</span> = <span class="number">2</span>;</span><br><span class="line">                dp[i][i+<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> sub_len = <span class="number">3</span>; sub_len &lt;= len; sub_len++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i + sub_len - <span class="number">1</span> &lt; len; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> j = i + sub_len - <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (s[i] == s[j] &amp;&amp; dp[i+<span class="number">1</span>][j<span class="number">-1</span>] == <span class="number">1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    start = i;</span><br><span class="line">                    <span class="built_in">max</span> = sub_len;</span><br><span class="line">                    dp[i][j] = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s.substr(start, <span class="built_in">max</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title>寻找两个有序数组的中位数</title>
    <url>/2020/01/25/%E5%AF%BB%E6%89%BE%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E4%B8%AD%E4%BD%8D%E6%95%B0/</url>
    <content><![CDATA[<p>这是leetcode第四题</p>
<h5 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h5><p>给定两个大小为 m 和 n 的有序数组 nums1 和 nums2。</p>
<p>请你找出这两个有序数组的中位数，并且要求算法的时间复杂度为 O(log(m + n))。</p>
<p>你可以假设 nums1 和 nums2 不会同时为空。</p>
<p>示例 1:</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">nums1 = [<span class="number">1</span>, <span class="number">3</span>]</span><br><span class="line">nums2 = [<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">则中位数是 <span class="number">2.0</span></span><br></pre></td></tr></table></figure>

<p>示例 2:</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">nums1 = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">nums2 = [<span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">则中位数是 (<span class="number">2</span> + <span class="number">3</span>)/<span class="number">2</span> = <span class="number">2.5</span></span><br></pre></td></tr></table></figure>
<h5 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h5><p>为了解决这个问题，我们需要理解“中位数的作为是什么”。在统计中，中位数被用来：<br><code>将一个几何划分为两个长度相等的子集，其中一个子集中的元素总是大于另一个子集中的元素</code></p>
<p>这其中又分为偶数组和奇数组：</p>
<p>奇数组：[2 3 5](实际上可看作[2 (3/3) 5]) 中位数为3, LMax1 = 3, RMin1 = 3</p>
<p>偶数祖：[1 4 7 9] 中位数为5.5 LMax2 = 4，RMin2 = 7</p>
<p>下面用二分法给出实现代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">findMedianSortedArrays</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums1, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums1.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">int</span> m = nums2.<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (n &gt; m)</span><br><span class="line">            <span class="keyword">return</span> findMedianSortedArrays(nums2, nums1);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> c1, c2, lo = <span class="number">0</span>, hi = <span class="number">2</span> * n, LMax1, RMin1, LMax2, RMin2;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (lo &lt;= hi)</span><br><span class="line">        &#123;</span><br><span class="line">            c1 = (lo + hi) / <span class="number">2</span>;</span><br><span class="line">            c2 = m + n - c1;</span><br><span class="line"></span><br><span class="line">            LMax1 = (c1 == <span class="number">0</span>) ? INT_MIN : nums1[(c1<span class="number">-1</span>)/<span class="number">2</span>];</span><br><span class="line">            RMin1 = (c1 == <span class="number">2</span> * n) ? INT_MAX : nums1[c1/<span class="number">2</span>];</span><br><span class="line">            LMax2 = (c2 == <span class="number">0</span>) ? INT_MIN : nums2[(c2<span class="number">-1</span>)/<span class="number">2</span>];</span><br><span class="line">            RMin2 = (c2 == <span class="number">2</span> * m) ? INT_MAX : nums2[c2/<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (LMax1 &gt; RMin2)</span><br><span class="line">                hi = c1 - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (LMax2 &gt; RMin1)</span><br><span class="line">                lo = c1 + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">max</span>(LMax1, LMax2) + <span class="built_in">min</span>(RMin1, RMin2)) / <span class="number">2.0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>二分思想</tag>
      </tags>
  </entry>
  <entry>
    <title>2020FLAG</title>
    <url>/2020/01/02/2020FLAG/</url>
    <content><![CDATA[<h5 id="2020FLAG"><a href="#2020FLAG" class="headerlink" title="2020FLAG"></a>2020FLAG</h5><ul>
<li>GPA上3.8，均分上90</li>
<li>背完六级词、雅思词汇</li>
<li>要刷的书/课程：《算法》第四版、梅耶三部曲、吴恩达机器学习课程</li>
<li>竞赛拿一次省级以上奖项</li>
<li>学会吉他曲：《卡农》</li>
</ul>
]]></content>
      <categories>
        <category>growth record</category>
      </categories>
      <tags>
        <tag>技术之外的东西</tag>
      </tags>
  </entry>
  <entry>
    <title>Summary of 2019</title>
    <url>/2019/12/31/2019%E7%9A%84%E6%9C%80%E5%90%8E%E4%B8%80%E5%A4%A9/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="enter password" />
    <label for="hbePass">enter password</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="59e72d7b755845ef6e5066bb5ab7e94a3de67c58d4812aa53630f982a9518ee0">89d5fa131ed53424f07316e1ef0fdc87cbc6a0283ba20f188eebc65a5889c5f697514907e72b40ff6afa9834534982f50425a55875a35b1cc1765babd7182028db27e99d4b8d8cede0bbd71dbfea1ac2c49011e4c266d946408bdd08a4af31d605adcd37f13087b99b4e42c09e495da1b889767186a21dfcd741e351f6e43211b3413342c19af15d213c21a9d8da11788bba29a103f5ebbac0645181c50d2bb87d3ee7319a5334ecc879ee01bb3232790f6e7b01f1f7195e81b20202078d54627635d3170fb968d3ea98de89dd51dad700e0bd3689712aa1d6d6de2d119e9e8cc4c137f28f4e8ca82a19aeed419cf77ff860cdb421022a716056cc852c58a7e590c987d30a8960b9e564a7167e5af488d98354f15c2fe687cc12b94512fb626677ed9b9d4d6756b545ca510543b9791057d11bcc98342a334e18b353dd12aa41692b5446beb0f33a58440c965736a5537e0a8b793314927dbb29db7e882b9bd7463e74e02c80ece20c1455014965ef402912e3ea537a77c39144d6dd6f8a706ae85652a91160027ef3beeeaf095ad621b3074fb5d1dea3309ea896a3009d390d4f82791f2e3ae3f6e1a4963b54a32e6283a5d277ed65093fc261c85058c614eb4f6de4754174f367d7420a581ac1079a0db1467a625e41dccc75b4158a0992567494921da78ab82bb138e936500ca56768446cc1da30008f5621cd7d39329f2d435eb578af837044ed6b5a06bd2ba99b49b0cc356866b06add733b93fa902ec6cff52aad3b21ebeb94fc9b311ec741982e938f4131524a9cfe6a628c18625e343b53c68e20508f612163014c8ead2eb84c66d3b4538ca682998d398f95ce4425049ac744f36a8a2d25bd280cfcc3bed29959f70fb788ebb44d7445dead00f0bc792e9aae2c2ddbf1f77fe3ffdf1e39151f740975973a897366884c1394c6ec9b4e620a0c35bece732eb4401c92813b835babbb523247fcb564fe40ed86252466ec74dfa5d60a5cc40da9e64370f390d2e03c4676b6c8fd1528c66f20d71c0b51947555bfe5aa829977abac489ac84d2c0fab9846c6206d9d35f6b747d4be5d965174e893cd0cc0874aaa3b56c98e8e3c73352dc6b67953172e8c1e707a169468c1f43128b66e12692ade72a3e456f29ebfd9d6c3f26d6f76950176acb1bf620d667ed4ca38a5c9e94d9660bbdd98aefe16dae04acc874ed21af378e39b5a95051d12ab81efe8d8de3dfa4b3ece92a2d8a4e07dc0fac79f53c76447d3c2036fedd85022bceb0d0cb3c03b014042929553344fc97a8649b9c21aa51af716d5605a3822e59e356f113ff7cfe663c67499d6871d2190d3988ee47c4bf802aa0de9761926b4008b01ce42b9108df3c8788ee91570915163e80062f8d14e75681f12acd1a42e533e0fdd71fd71a76c9e2fa6ca0d81d463d9e524973e8b640c3352e7a673c0200375c47ff4fd19d8e21841170b9a85f26a7059667d0f91734e6975ebf8ce76c98a6968a5a0a5a2bf48e199ed79f84fa36bd3c23814625d883cf1c739d2914bf5c9b87acd8233b9dae78ae97cf7078bb984bca7f07844a098ab5244ead9b6e3f4da59c9942e9a965a52781067cc0b25f7bc80732d8bbd9c65e19fff3da9aa3ff8bc867f89157704030e7f3224fcec503d386cd39bff432f732acb9c3750f501ac7f94ec1aec8d8f486910302e077ddd171fdba14e90d9e1f54007cb62153012f23b0f784d7cf2198f04976609eff450f226af24323fc388b4e155b467766718add437d73e7b3edd4f7d65e9839ac33e7a38b1c0b7512b20e6876b5ee3b39c90e842da32f35770ee1c4c12b3b904e90415d386c53e1d2d5a1e7c00dfb58ae0c2da0ddf8a0c6252d9ac2a5fa1d18591140903222cdeb1b1fa5f0e9745fe6dd3803f9057f8e32554af009cf297b9a260ae8eb41a6e2ff7d183b9c06f908ef53e158879b0676719947194db84dfae92a783694aabb507c442d282366b90a3c4558940ee3548323c44435aaa77815ac6b80e99e34fb1ec0e38925ad033b4cfeb08b08b21af739655082145ea8f2fe664949d288b21ce010c81c9d59dc07b0cfdc2e4c78d7ebdc46365c742a548b402bb06817a4e71adccd1e34d61519be05469eb82cf990248999d03df24792d326ce002f50c42617c360cefa21cedfd06296aa555e1077727d455b4df6e967d8bbc2aebd3188a8e8a68f36be53b41fc9af1d510233b0287a85d384a4c12d0891b255264e89fffa516e77d52d4e8927fa86fbe2cd7169579b36ec6ea40e99877968ee2307fbc8a33a3dd68e91e9c131fa61dd39ce3347d722a566238387026b644d269936b4af077a711bef70d212943f3560641b0a8f2f0d9dba33311ea48acfe6b024d559f592f261bec5106d98d5d0526650471a0522e7d782632c05b1f8b33dec2aab643a4196427664360096a1ff3e84e43fe2171d51283c87c2ea7f7eeb255357375904cf29dcf8c19c1089ba76c71b89d43ae434df4baa2ddbd1540f5db0cfb7a48484b931e7b2e83e3bec814992930ef7948c037eb8d8740b0efe11e783e6074238944671d6af194bc3251984a4884bcc52449bca284cbd34d43d6b93050078da5577b8c801672c1ceffaaf31a040dd2176e8f13971ad548dd0ec7bf9f336dc0317266292b6db5ed91bc476230995cd9a329cefd223db55852823fd05db55c9966620682bfc38e3a4f29fdec1ee441fcb0941ea5f25c5a9d4a2907f686c97fffbe6943ce2bbe05ee47c1e1397d6e64c18549225fed97ad367ebb8750d560fced9b41f746ac5e816fd4a612fc0ff56bf618f2949b687cccdadbbe0ebabb655cea80c02c0086a5050ee43cb1007f61e4ec0fc1a737d45e93485f2b525f0ef643d6f7f3dfc7e3524b7a7bf1a68f75cb1e015059caecf65dc93e190ee8cead2c1cf795cd6ac601d97954e3ccfe740b681761971777b3cd05787cffc6d3894b7fceaba9f7d7c73f983f70f080ef24758ad623a046fc1f1b739cceeefa67cda43b671434c20dd30d131cedb4b0249e35888f6681de6743d7fa3ce3258eeb444ffc9cc41c477e7f248cbc335f88c1a0033ed2b5c67597c81d0db6ac0859de61916682a0f8407847640964d20cc6f60cb1f0c0a117d7d66ae8405452c36ee9e1109512f413fd06bc8f35038a52ccbeade2a55ddae5795f3cea3baac7d8556d7357f530a8b029bd0dfe6fac58a3f9ecdd825631ef9a5ec15c0a78665c4cf0ae0aaef14a3b759b0b952e481e8ef464b49366e1c10f5f947444db35371d5aab91e889850064cab6834cc03a077dca79afa863e8592123e07825c4e234f98ef975fe3490e0ebd8ed3f4be74c65a513464f3035b8b0fdafd13ea10c4dc7299abe0f58d16e0e6b74dcd4b282a6d6a599cd8689eed4c0e98c363c6cf0557cc893ca91b229d3db0fba6d18a4fefae7ab6ab21d13985ee2a65c3664fc14ab7726b7bab8228791b30112d188484968a4bceebd5d7e66a8f3d73b11dde116cf06c88aadc2d2f76bacbe4ca60f33d5b8ae0e0d481eb5172b8b6c6b93bdc738505dad17a16b329c17533fd42398c51d934857ac05708ee5751d8ad2fd1d0160969a4357542ece2d82638d8637284815fcf15b584b56d35a7ab4cf2c6f1ff905accfb2925bce0ac049823e7e7dd0369405976bb828e4a45c4ba23d0e8aa4fbe428e7ef82b97ec4c92370771d19165caaf5a85b43c67ab090ff5ad020542ee8a3115feb1936642a3199089031e7078da71901d934757e4b75a4e75c34b979eb5a933d6a30b5a3b18ce4af36dd1b565e34f3c55205e78f10b8bea9e0767af479173df6c4d183dd393a68b487dbbf43092fb05fc974d031ac63cbf909509c2526ad7a532c88f2017d695120e14804964ea457d0baf9e361d372f8bd4d4c7330109876bf6a1cfa34510a550b0a658bf64ca4a068d16912e0d2a23ac988d50852ae68ecad8a6464ec777239d4280816a2046a5ef722d69331587828b7656a65a0f2e17c645458445cbc9b9e54fe254193abcffc32d55432dfdb79b6632c760f2686188d07702f33fd17d2e74e899c9e7d6b9471fb6ad6c2cf6b82926dfce1e1c3975d0c95679f1270173a27688fbe27cf837305adb64289e281e1748f150cb54b10815ba8416eca4ccf7752b74af4b4c20104b95e960895fdd67f6c24e2292282aa595cb057d875eac559b0cca170c47037c1d91841e1bc9069f3adb84b89d1ab44ac14afac60018eb9b286068ee1dda24e2742842420c9901e0acd6621f27463ad0bcb6a29cd48b61f93af767785a27cfcb400190779176624386c804bf45d475148048333fca55b97a85f13b21f1f4acd39eab60491e03adfb6079ad11283cddba81f9a93bac194952a22a46d0ade58329279072e45776d6a51488a6f8554c848e38edadabcf3ee89e9bdabaa90f36be4d564cab7243249653ac3e12b2386020f7b66a520e1ef7160c3bc53d83288aad1bf73aa07a7185d9af8104db5b1660b4ee9a32865f4668db82a598c97c743f12c07e0f303c98b610365134d75f77d0d8195d4c34ff8da47e7d3257c333dfcf9a839bd227b3c809a99edbc1e0e6eaef9a34ea4e1d2f720d679ba5ab29a7ccfc1228d267c29e6ea44faaf3b063236a0e25aae3d43a4e0c0159584e1332281c2fe24d0439b4a9e77655c997fa615e33b62cd331043d601cbe3aaec7ce8185e01bcd39a08e4c42698c8f3a6da9dff86f6b44ea6a7e5ce87b6519a35efed686c29cb877718d5b44a6fba91a738eadf3bcb685c93733975b97432d3d95bc7952f6ed1f1cc20d667a63860ae8ab0377d97b1e5e0eafef30fbb9bf3a0c006af3284e692e76fecb0778770d71120c3f1e672b7eb5b26a7ae4a0023f444e214d5231c46eacc24705b2727f080cdbcd07f39da70dad207925a0ba94a643da0c41a</script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>growth record</category>
      </categories>
      <tags>
        <tag>技术之外的东西</tag>
      </tags>
  </entry>
  <entry>
    <title>拓扑排序</title>
    <url>/2019/12/29/%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F%E4%B8%8E%E5%85%B3%E9%94%AE%E8%B7%AF%E5%BE%84/</url>
    <content><![CDATA[<h4 id="拓扑排序"><a href="#拓扑排序" class="headerlink" title="拓扑排序"></a>拓扑排序</h4><ul>
<li>问题描述<br>拓扑排序(Topological Sort)是从工程领域抽象出来的问题求解方法。一般来说，一个工程大多由若干子工程组成，各项活动之间存在一定的制约关系。<br>例如，一项工程有A、B、C三件事要做，但相互间存在这样的制约关系：A完成之后才能到B，B完成后才能到C，C完成后才能到A。很显然，这种制约关系将导致工程无法进行。<br>为求解此类问题，首先用图来表示工程：用顶点表示活动；用弧表示活动间的关系。这种图称为“AOV网”。</li>
<li>拓扑排序方法及实现<ol>
<li>初始化空栈S。</li>
<li>将AOV网中所有入度为0的顶点压入栈S中。</li>
<li>若S不空，则V=POP(S)，并输出V。</li>
<li>将V的每个后继的入度减1，若其中某个后继的入度变成了0，则将其压入栈S中。</li>
<li>转3</li>
</ol>
</li>
<li>基于邻接矩阵的一种实现<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">TopologicalSortS</span><span class="params">(Graph &amp;G, <span class="keyword">int</span> topoList[])</span></span></span><br><span class="line"><span class="function"></span>&#123;   <span class="comment">// topoList[]数组用于存放拓扑序列</span></span><br><span class="line">    <span class="keyword">int</span> inds[MaxVerNum+<span class="number">1</span>];  <span class="comment">// 定义入度数组</span></span><br><span class="line">    seqStack S;             <span class="comment">// 定义一个顺序栈</span></span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">int</span> v;                  <span class="comment">// 顶点编号，从1开始</span></span><br><span class="line">    <span class="keyword">int</span> vCount = <span class="number">0</span>;         <span class="comment">// 记录顶点入度为0的顶点数</span></span><br><span class="line">    initStack(S);           <span class="comment">// 初始化栈</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= G.VerNum; i++) <span class="comment">// 入度数组初始化</span></span><br><span class="line">        inds[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= G.VerNum; i++)</span><br><span class="line">        topoList[i<span class="number">-1</span>] = <span class="number">-1</span>;   <span class="comment">// 初始化顶点编号为-1</span></span><br><span class="line">    GetInDegrees(G, inds);  <span class="comment">// 从邻接矩阵获取图中各个顶点的初始化入度</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= G.VerNum; i++) <span class="comment">// 入度为0的顶点入栈</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (inds[i] == <span class="number">0</span>)</span><br><span class="line">            pushStack(S, i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (!StackEmpty(S))</span><br><span class="line">    &#123;</span><br><span class="line">        popStack(S, v);     <span class="comment">// 从栈顶弹出一个入度为0的顶点编号到v</span></span><br><span class="line">        topoList[vCount] = v;   <span class="comment">// 当前入度为0顶点v，加入拓扑序列</span></span><br><span class="line">        vCount++;           <span class="comment">// 已处理顶点（入度为0）数加1</span></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= G.VerNum; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (G.AdjMatrix[v][i] &gt;= <span class="number">1</span> &amp;&amp; G.AdjMatrix[v][i] &lt; INF &amp;&amp; inds[i] &gt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                inds[i]--;  <span class="comment">// 与v邻接的顶点i的入度减1</span></span><br><span class="line">                <span class="keyword">if</span> (inds[i] == <span class="number">0</span>)   <span class="comment">// 顶点i的入度已经为0，入栈</span></span><br><span class="line">                    pushStack(S, i);</span><br><span class="line">            &#125;         </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (vCount == G.VerNum)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">`</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>AOV、AOE</tag>
      </tags>
  </entry>
  <entry>
    <title>四级押题作文5篇</title>
    <url>/2019/12/04/%E5%9B%9B%E7%BA%A7%E6%8A%BC%E9%A2%98%E4%BD%9C%E6%96%875%E7%AF%87/</url>
    <content><![CDATA[<p>内容摘自知乎<a href="https://zhuanlan.zhihu.com/p/93551714" target="_blank" rel="noopener">四六级考前冲刺—四级押题作文5篇</a></p>
<h3 id="Topic-1：自立"><a href="#Topic-1：自立" class="headerlink" title="Topic 1：自立"></a>Topic 1：自立</h3><ul>
<li>Directions: For this part, you are allowed 30 minutes to write a short essay. You should start your essay with a brief description of the picture and then express your views on self-reliance. You should write at least 120 words but no more than 180words.</li>
<li>“It’s not my fault. Bad grades wouldn’t matter if I had been born rich.”</li>
</ul>
<h5 id="参考范文"><a href="#参考范文" class="headerlink" title="参考范文"></a>参考范文</h5><h5 id="On-Self-reliance"><a href="#On-Self-reliance" class="headerlink" title="On Self-reliance"></a>On Self-reliance</h5><p>As is vividly depicted in the picture, a boy is complaining to his parents that if he had been born with a silver spoon in his mouth, bad grades wouldn’t matter. The picture reflects a serious social problem that nowadays some children are more dependent on their parents. They lack self-reliance.</p>
<p>It is widely acknowledged that self-reliance is indispensable to everyone. For one thing, self-reliance plays a crucial role in the cultivation of creativity. Relying on others means repetition, imitation, and fewer efforts, which may not lead to innovation, an element greatly needed in this era of competition. For another, what is offered by others is not limitless. If children do not depend on themselves, one day when nobody offers them anything anymore, they will fail with regret.</p>
<h3 id="Topic-2：对抗雾霾"><a href="#Topic-2：对抗雾霾" class="headerlink" title="Topic 2：对抗雾霾"></a>Topic 2：对抗雾霾</h3><ul>
<li><p>Directions: In view of the seriousness of the problem, it is high time for children to realize the importance of self-reliance. As for adults, they should encourage their children to confront challenges by themselves; as for children, they should keep “No pain, no gain” in mind and strive for their dreams independently.</p>
</li>
<li><p>As a college student, you are very concerned about air quality; what do you think is the effective way to fight smog?</p>
</li>
</ul>
<h5 id="参考范文-1"><a href="#参考范文-1" class="headerlink" title="参考范文"></a>参考范文</h5><h5 id="On-Fighting-Smog"><a href="#On-Fighting-Smog" class="headerlink" title="On Fighting Smog"></a>On Fighting Smog</h5><p>Recently, smog has become a problem we have to face. There is a growing concern over smog which is believed to threaten people’s health. It is high time that we took some methods to protect ourselves.</p>
<p>People’s views on how to fight smog vary from person to person. Generally speaking, there are three effective ways. First of all, try to reduce the time of outdoor activities, especially when the air quality is not good enough. Secondly, make good use of protective things such as mouth-muffles so that harmful substances would be kept out. Most importantly, protect our environment and cut off the source of smog. Only in this way can we really achieve a long-term success.</p>
<p>From what has been mentioned above, we can come to the conclusion that in order to keep away from smog, we can hide ourselves in a safe area; however, it is much more necessary for us to face the root of the problem bravely and fight against it.</p>
<h3 id="Topic-3：赞美"><a href="#Topic-3：赞美" class="headerlink" title="Topic 3：赞美"></a>Topic 3：赞美</h3><ul>
<li>Directions:  For this part, you are allowed 30 minutes to write a short essay entitled The Importance of Compliments by commenting on Mark Twain’s remark “I can live for two months on a good compliment.” You should write at least 120 words but no more than 180 words.</li>
</ul>
<h5 id="参考范文-2"><a href="#参考范文-2" class="headerlink" title="参考范文"></a>参考范文</h5><h5 id="The-Importance-of-Compliments"><a href="#The-Importance-of-Compliments" class="headerlink" title="The Importance of Compliments"></a>The Importance of Compliments</h5><p>Just as the words Mark Twain even remarked,“I can live for two months on a good compliment.” What he said implies that a compliment is a necessity in our daily life.</p>
<p>As far as I am concerned, compliments are essential to our life for the following three reasons. Firstly, compliments from others boost our confidence and explore our potential. Here is a story to illustrate this point. A child was often scorned by others because he was slow in study. However, his mother never gave him up and always paid him compliments. Little by little, he built up confidence and finally entered a famous university. Secondly, compliments in our daily life bring harmony and happiness to us. What’s more, the significance of compliments has also been proved by psychological studies, which support that a compliment is to the soul what water is to the body.</p>
<p>In summary, good compliments can help us win others’ trust and improve our life. So be generous to give your whole-hearted compliments to the people around you!</p>
<h3 id="Topic-4：应聘国际会议志愿者"><a href="#Topic-4：应聘国际会议志愿者" class="headerlink" title="Topic 4：应聘国际会议志愿者"></a>Topic 4：应聘国际会议志愿者</h3><ul>
<li>Directions: For this part, you are allowed 30 minutes to write an application letter. You should write at least 120 words but no more than 180 words and base your composition on the outline given below in Chinese.<br>假设你是张丽,学校要承办一个国际会议,正在招聘志愿者。你比较感兴趣,想要参加,请根据以下提示写一封申请信。<ol>
<li>应聘的优势</li>
<li>如果被选为志愿者，你将会如何做</li>
</ol>
</li>
</ul>
<h5 id="参考范文-3"><a href="#参考范文-3" class="headerlink" title="参考范文"></a>参考范文</h5><p>Dear Sir or Madam,</p>
<p>It’s my great honor to have the chance to run for the volunteer for the international conference to be hosted by our university. I’m Zhang Li, a sophomore majoring in English. I am sure that I can be qualified for being a volunteer.</p>
<p>First of all, I specialize in English and my fluent oral English will help me a lot. Besides, I have served as a volunteer for two grand sports games. Consequently, I have accumulated sufficient experience. More importantly, I am an energetic person full of passion and enthusiasm for voluntary work. If I were elected, I would go to great lengths to participate in the training and make myself more qualified. Moreover, I would place more importance on team spirit and cooperate with others. To sum up, I would make every effort to finish the mission assigned to me.</p>
<p>Please trust me, and trust your choice. Thank you.</p>
<p>Yours,</p>
<p>Zhang Li</p>
<h3 id="Topic-5：大学生考证热"><a href="#Topic-5：大学生考证热" class="headerlink" title="Topic 5：大学生考证热"></a>Topic 5：大学生考证热</h3><ul>
<li>Direction: For this part, you are allowed 30 minutes to write a short essay entitled Certificate Craze on Campus following the outline given below. You should write at least 120 words but no more than 180 words.<ol>
<li>当今大学生需要通过各种资格认证考试,以获得相应的证书</li>
<li>参加这些考试并获得证书的必要性</li>
<li>我的观点</li>
</ol>
</li>
</ul>
<h5 id="参考范文-4"><a href="#参考范文-4" class="headerlink" title="参考范文"></a>参考范文</h5><h5 id="Certificate-Craze-on-Campus"><a href="#Certificate-Craze-on-Campus" class="headerlink" title="Certificate Craze on Campus"></a>Certificate Craze on Campus</h5><p>Nowadays each college student must have a pile of various certificates upon graduation, such as National Computer Rank Examination Certificate and Accounting Qualification Certificate. Many people believe that it is necessary to get these certificates though we may need to spend much time on the examinations.</p>
<p>First of all, the certificates are the proof of our capabilities to some extent. Besides, with these certificates, it is much easier for graduates to be regarded as qualified applicants in job hunting and attract the attention of various employers. Most importantly, college students can acquire extensive knowledge in the process of preparing for the examinations.</p>
<p>For my part, the certificates are just a means to measure college students’ abilities while the knowledge acquired is truly beneficial and powerful.</p>
]]></content>
      <categories>
        <category>English article</category>
      </categories>
      <tags>
        <tag>English</tag>
      </tags>
  </entry>
  <entry>
    <title>12-3</title>
    <url>/2019/12/03/12-3/</url>
    <content><![CDATA[<h3 id="Modern-Scientific-and-Tecknological-Achievements"><a href="#Modern-Scientific-and-Tecknological-Achievements" class="headerlink" title="Modern Scientific and Tecknological Achievements"></a>Modern Scientific and Tecknological Achievements</h3><p>As western culture came to influence the East at the end of the 16th century and beginning of the 17th century, European science and technology also began to be introduced into China. The development of science and technology was fostered(培养) by successive Chinese governments starting with “westernization movement” in the 20th century. Since 1949, science and technology in China have continued to develop rapidly, particularly in the last several decades.</p>
<h3 id="Atomic-Energy"><a href="#Atomic-Energy" class="headerlink" title="Atomic Energy"></a>Atomic Energy</h3><p>In 1958, China built its first heavy water reactor(反应堆) and cyclotron(回旋加速器), heralding(预示着) China’s entry into the atomic age. The reactor generated 7000-10000 kw of the thermal(热量的) power, and the cyclotron accelerated alpha particles(粒子), producing 2.5 million electron volts. At the same time, China built a high-pressure electrostatic(静电) accelerator(加速器) to accelerate produced its first radioisotope(放射性同位素) with the atomic reactor. The particles produced from the accelerator were used in physical research on atomic nuclei(核心).<br>The production of nuclear(原子能的) energy is a breakthrough in the development of the energy industry. China has mastered the complicated technology associated with exploring and smelting(冶炼) uranium(铀) ore(矿), spliting treating(分割处理) and storing nuclear wastes. China is one of the few countries in the world that have mastered these technologies.</p>
<h3 id="Breakthrough-in-Goldbach’s-Conjecture"><a href="#Breakthrough-in-Goldbach’s-Conjecture" class="headerlink" title="Breakthrough in Goldbach’s Conjecture"></a>Breakthrough in Goldbach’s Conjecture</h3><p>Chinese mathematician, Chen Jingrun, achieved worldwide recognition in 1978 with his calculation of Goldbach’s Conjecture. He preved that any sufficient even number could be the product of a prime number plus at most two other prime numbers(abbreviated as 1+2). The conjecture had remained unresolved for over 200 years. It is now commonly referred to as Chen’s Theorem.</p>
<h3 id="Chang’e-3-Lunar-Lander-and-its-Yutu-Lunar-Rover"><a href="#Chang’e-3-Lunar-Lander-and-its-Yutu-Lunar-Rover" class="headerlink" title="Chang’e-3 Lunar Lander and its Yutu Lunar Rover"></a>Chang’e-3 Lunar Lander and its Yutu Lunar Rover</h3><p>The dramatic soft landing of Chang’e-3 lunar lander on the moon’s Sinus Iridium, or the Bay of Rainbows on 14 Devember 2013 signaled the success of the Chang’e-3 mission, which is comprised of China’s Yutu lunar rover riding piggyback atop a much larger four-legged landing vehicle. The success was hailed as a milestone in the development of China’s space programmes.</p>
]]></content>
      <categories>
        <category>English article</category>
      </categories>
  </entry>
  <entry>
    <title>no title</title>
    <url>/2019/11/25/no-title/</url>
    <content><![CDATA[<ul>
<li><p>几天前就在某(bi)乎看到了那篇网易暴力裁员的帖子，到现在已经在各大社交平台刷屏了。阅读过程无不感受到的是资本家的丑恶嘴脸，自己作为一个涉世未深的大学生，无不感到痛心与愤懑。</p>
</li>
<li><p>这里对事件过程已经不想再多批判些什么了，我只想从一个未入职场的大学生的角度说一些东西，成长以来，我们被教育的总是一些“等步入社会，你就知道竞争有多激烈，多残酷”之类。绝大部分人从出生开始，生性何尝不是善良，只是我们总是被教育“职场是残酷的事实”、“社会是残酷的事实”，变得“精明”一点是理所应当。在这样的教育背景以及现实环境下，人在成长过程中便难免会变得复杂起来。确实，优胜劣汰、适者生存是自然规律。放到个人来说，进步的方式有许多种，通过伤害同类来满足进步需求实在是可耻。如果每个人最开始的善良在成长过程中能保留住，从最开始就不断被教育“这个世界是美好的”的思想，最开始就形成良好的社会氛围，又继续这样教育下一代，这必然是一种良性循环，如果这样，我想我们所处的世界又是不一样的世界。反之的情况，也就是我们当下所处的事实。</p>
</li>
<li><p>阅历尚浅，成长以来，也难免遇到困难以及过狗血不已的事情，但知自己善良仍在。与这位被暴力辞职的前网易员工一样，我的专业与我的目标也决定了我不久以后会处在互联网行业这样一个竞争激烈的环境，未来还有许多不可测的困难，但我愿像他一样勇敢地去反抗噩梦，同时必坚定在吸取教训自我进步的过程中坚守善良的决心。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>所想</category>
      </categories>
      <tags>
        <tag>技术之外的东西</tag>
      </tags>
  </entry>
  <entry>
    <title>快速排序算法</title>
    <url>/2019/11/25/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<ul>
<li>快速排序实际上是基于一种二分思想</li>
<li>时间复杂度：O(NlogN)</li>
<li>在处理基准数的左右两边的序列时，用到了递归。<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quicksort</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, t, temp;</span><br><span class="line">    <span class="keyword">if</span> (left &gt;= right)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    temp = a[left]; <span class="comment">// temp存储基准数</span></span><br><span class="line">    i = left;</span><br><span class="line">    j = right;</span><br><span class="line">    <span class="keyword">while</span> (i != j)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 顺序很重要，要从右往左找</span></span><br><span class="line">        <span class="keyword">while</span> (a[j] &gt;= temp &amp;&amp; i &lt; j)</span><br><span class="line">            j--;</span><br><span class="line">        <span class="comment">// 再从左往右找</span></span><br><span class="line">        <span class="keyword">while</span> (a[i] &lt;= temp &amp;&amp; i &lt; j)</span><br><span class="line">            i++;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (i &lt; j)</span><br><span class="line">        &#123;</span><br><span class="line">            t = a[i];</span><br><span class="line">            a[i] = a[j];</span><br><span class="line">            a[j] = t;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 最终将基准数归位</span></span><br><span class="line">    a[left] = a[i];</span><br><span class="line">    a[i] = temp;</span><br><span class="line"></span><br><span class="line">    quicksort(a, left, i - <span class="number">1</span>);  <span class="comment">// 递归处理基准数右边</span></span><br><span class="line">    quicksort(a, i + <span class="number">1</span>, right);  <span class="comment">// 递归处理基准数左边</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">100</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line"></span><br><span class="line">    quicksort(a, <span class="number">0</span>, n - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出排序后的结果</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; a[i];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>快速排序</tag>
      </tags>
  </entry>
  <entry>
    <title>迷宫问题</title>
    <url>/2019/11/24/%E8%BF%B7%E5%AE%AB%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<ul>
<li>问题描述：给定迷宫（可以为二维数组0-1矩阵），求从起点到目标点路径并求最短步长）</li>
</ul>
<h3 id="DFS解决"><a href="#DFS解决" class="headerlink" title="DFS解决"></a>DFS解决</h3><ul>
<li>深度优先搜索模型可参考博客：<a href="http://www.zonepg.com/2019/11/24/DFS%E8%A7%A3%E5%86%B3%E5%85%A8%E6%8E%92%E5%88%97%E9%97%AE%E9%A2%98/#more" target="_blank" rel="noopener" title="DFS">DFS解决全排列问题</a>.<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, min_d = <span class="number">99999999</span>;</span><br><span class="line"><span class="keyword">int</span> p, q;   <span class="comment">// 目标点坐标</span></span><br><span class="line"><span class="comment">// nextPos为行进方向</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> nextPos[<span class="number">4</span>][<span class="number">2</span>] = &#123; &#123;<span class="number">0</span>, <span class="number">1</span>&#125;,  <span class="comment">// 向右走</span></span><br><span class="line">                   &#123;<span class="number">1</span>, <span class="number">0</span>&#125;,  <span class="comment">// 向下走</span></span><br><span class="line">                   &#123;<span class="number">0</span>, <span class="number">-1</span>&#125;, <span class="comment">// 向左走</span></span><br><span class="line">                   &#123;<span class="number">-1</span>, <span class="number">0</span>&#125;, <span class="comment">// 向上走</span></span><br><span class="line">                 &#125;;</span><br><span class="line"><span class="comment">// 数组a为地图，数组book记录已走过的点</span></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">50</span>][<span class="number">50</span>], book[<span class="number">50</span>][<span class="number">50</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> <span class="built_in">step</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 到达目标殿</span></span><br><span class="line">    <span class="keyword">if</span> (x == p &amp;&amp; y == q)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 输出可行路径</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++)</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; book[i][j];</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"step="</span> &lt;&lt; <span class="built_in">step</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 更新最短步长</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">step</span> &lt; min_d)</span><br><span class="line">        &#123;</span><br><span class="line">            min_d = <span class="built_in">step</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 枚举四种走法</span></span><br><span class="line">    <span class="keyword">int</span> tx, ty, k;</span><br><span class="line">    <span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; <span class="number">4</span>; ++k)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 计算下一个点的坐标</span></span><br><span class="line">        tx = x + nextPos[k][<span class="number">0</span>];</span><br><span class="line">        ty = y + nextPos[k][<span class="number">1</span>];</span><br><span class="line">        <span class="comment">// 判断是否越界</span></span><br><span class="line">        <span class="keyword">if</span> (tx &lt; <span class="number">0</span> || tx &gt; n<span class="number">-1</span> || ty &lt; <span class="number">0</span> || ty &gt; m - <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span> (!a[tx][ty] &amp;&amp; !book[tx][ty])</span><br><span class="line">        &#123;</span><br><span class="line">            book[tx][ty] = <span class="number">1</span>;   <span class="comment">// 标记该点已走过</span></span><br><span class="line">            dfs(tx, ty, <span class="built_in">step</span> + <span class="number">1</span>);  <span class="comment">// 开始尝试下一个点</span></span><br><span class="line">            book[tx][ty] = <span class="number">0</span>;   <span class="comment">// 尝试结束，取消该点标记</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> startx, starty;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"迷宫的行数与列数："</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"读入迷宫："</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; m; j++)</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; a[i][j];</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"读入起点和终点坐标："</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; startx &gt;&gt; starty &gt;&gt; p &gt;&gt; q;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从起点开始搜索</span></span><br><span class="line">    book[startx][starty] = <span class="number">1</span>;   <span class="comment">// 标记已在路径中</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"可行路线为："</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    dfs(startx, starty, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"最短步数："</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; min_d;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="BFS解决"><a href="#BFS解决" class="headerlink" title="BFS解决"></a>BFS解决</h3><ul>
<li>广度优先搜索思想是通过“一层一层”扩展的方法来寻求目标点，扩展时发现一个点就将这个点加入到队列中，直至找到目标点。<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">50</span>][<span class="number">50</span>], book[<span class="number">50</span>][<span class="number">50</span>];</span><br><span class="line"><span class="keyword">int</span> nextPos[<span class="number">4</span>][<span class="number">2</span>] = &#123;</span><br><span class="line">        &#123; <span class="number">0</span>, <span class="number">1</span> &#125;,   <span class="comment">// 向右走</span></span><br><span class="line">        &#123; <span class="number">1</span>, <span class="number">0</span> &#125;,   <span class="comment">// 向下走</span></span><br><span class="line">        &#123; <span class="number">0</span>, <span class="number">-1</span> &#125;,   <span class="comment">// 向左走</span></span><br><span class="line">        &#123; <span class="number">-1</span>, <span class="number">0</span> &#125;,  <span class="comment">// 向上走</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">note</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x;  <span class="comment">// 横坐标</span></span><br><span class="line">    <span class="keyword">int</span> y;  <span class="comment">// 纵坐标</span></span><br><span class="line">    <span class="keyword">int</span> f;  <span class="comment">// 父亲在队列中的编号</span></span><br><span class="line">    <span class="keyword">int</span> s;  <span class="comment">// 步数</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">note</span> <span class="title">que</span>[2500];</span></span><br><span class="line"><span class="keyword">int</span> head, tail;</span><br><span class="line"><span class="keyword">int</span> startx, starty, p, q, tx, ty, flag, m, n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (head &lt; tail)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;= <span class="number">3</span>; k++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 计算下一个点的坐标</span></span><br><span class="line">            tx = que[head].x + nextPos[k][<span class="number">0</span>];</span><br><span class="line">            ty = que[head].y + nextPos[k][<span class="number">1</span>];</span><br><span class="line">            <span class="comment">// 判断是否越界</span></span><br><span class="line">            <span class="keyword">if</span> (tx &lt; <span class="number">0</span> || tx &gt; n - <span class="number">1</span> || ty &lt; <span class="number">0</span> || ty &gt; m - <span class="number">1</span>)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="comment">// 判断是否是障碍物或者已经在路径中</span></span><br><span class="line">            <span class="keyword">if</span> (!a[tx][ty] &amp;&amp; !book[tx][ty])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 把这个点标记为已经走过</span></span><br><span class="line">                <span class="comment">// 注意宽搜每个点只入队一次，所以和深搜不同，不需要将book还原</span></span><br><span class="line">                book[tx][ty] = <span class="number">1</span>;</span><br><span class="line">                <span class="comment">// 插入点到新的队列中</span></span><br><span class="line">                que[tail].x = tx;</span><br><span class="line">                que[tail].y = ty;</span><br><span class="line">                que[tail].f = head;</span><br><span class="line">                que[tail].s = que[head].s + <span class="number">1</span>;</span><br><span class="line">                tail++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 如果到目标点了，停止扩展，任务结束，退出循环</span></span><br><span class="line">            <span class="keyword">if</span> (tx == p &amp;&amp; ty == q)</span><br><span class="line">            &#123;</span><br><span class="line">                flag = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (flag)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="comment">// 当一个点扩展结束后，head++才能呢个对后面的点再进行扩展</span></span><br><span class="line">        head++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; m &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; a[i][j];</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"输入起点与终点坐标："</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; startx &gt;&gt; starty &gt;&gt; p &gt;&gt; q;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 往队列插入迷宫入口坐标</span></span><br><span class="line">    que[tail].x = startx;</span><br><span class="line">    que[tail].y = starty;</span><br><span class="line">    que[tail].f = <span class="number">-1</span>;</span><br><span class="line">    que[tail].s = <span class="number">0</span>;</span><br><span class="line">    tail++;</span><br><span class="line">    book[startx][starty] = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 从起点开始搜索</span></span><br><span class="line">    bfs(startx, starty);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"最短路径长为："</span> &lt;&lt; que[tail<span class="number">-1</span>].s;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"回溯路径："</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = tail - <span class="number">1</span>; i &gt; <span class="number">0</span>;)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"("</span> &lt;&lt; que[i].x &lt;&lt; <span class="string">", "</span> &lt;&lt; que[i].y &lt;&lt; <span class="string">")"</span>&lt;&lt; <span class="string">"&lt;-"</span>;</span><br><span class="line">        i = que[i].f;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"("</span> &lt;&lt; que[<span class="number">0</span>].x &lt;&lt; <span class="string">", "</span> &lt;&lt; que[<span class="number">0</span>].y &lt;&lt; <span class="string">")"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Depth First Search, DFS</tag>
        <tag>Breadth First Search, BFS</tag>
      </tags>
  </entry>
  <entry>
    <title>DFS解决全排列问题</title>
    <url>/2019/11/24/DFS%E8%A7%A3%E5%86%B3%E5%85%A8%E6%8E%92%E5%88%97%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h3 id="深度优先搜索模型"><a href="#深度优先搜索模型" class="headerlink" title="深度优先搜索模型"></a>深度优先搜索模型</h3><ul>
<li>理解深度优先搜索的关键在于解决“当下该如何做”。至于“下一步如何做”则与“当下该如何做是一样的”。</li>
<li>下面的代码是深度优先搜索的基本模型<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> <span class="built_in">step</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    判断边界</span><br><span class="line">    尝试每一种可能 <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        继续下一步 dfs(<span class="built_in">step</span>+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    返回 <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="输出1～n的全排列"><a href="#输出1～n的全排列" class="headerlink" title="输出1～n的全排列"></a>输出1～n的全排列</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>], book[<span class="number">10</span>], n, count;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> <span class="built_in">step</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="comment">// 到了第n + 1步，则表示前 n 个数已排列好一次，输出序列</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">step</span> == n + <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; a[i];</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        count++;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 此时为第 step 步</span></span><br><span class="line">    <span class="comment">// 按照1～n的顺序一一尝试</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 判断该数是否已经在序列中</span></span><br><span class="line">        <span class="comment">// book[i] == 0表示数 i 未在序列中</span></span><br><span class="line">        <span class="keyword">if</span> (!book[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 将 i 放入序列中</span></span><br><span class="line">            a[<span class="built_in">step</span>] = i;</span><br><span class="line">            <span class="comment">// 标记为 1，表示 i 已进入序列</span></span><br><span class="line">            book[i] = <span class="number">1</span>;</span><br><span class="line">            <span class="comment">// 开始处理下一个位置</span></span><br><span class="line">            dfs(<span class="built_in">step</span> + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 这是非常重要的一步，一定要将已经进入序列的 i 收回，才能进行下一次尝试</span></span><br><span class="line">            book[i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    dfs(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"一共有"</span> &lt;&lt; count &lt;&lt; <span class="string">"种排列方式"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Depth First Search, DFS</tag>
      </tags>
  </entry>
  <entry>
    <title>火柴棍问题</title>
    <url>/2019/11/24/%E7%81%AB%E6%9F%B4%E6%A3%8D%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<ul>
<li>题目：现在有m(m&lt;=24)根火柴棍，拼出A+B=C的等式。</li>
<li>注意：<ol>
<li>加号与等号各自需要两根火柴棍</li>
<li>A不等于B,则A+B=C与B+A=C是为不同的等式</li>
<li>所有火柴棍必须都用上</li>
</ol>
</li>
<li>分析：m &lt;= 24，除去‘+’，‘=’占用的四根火柴，还剩下20根火柴，最多可以有20个1。因此，A、B、C任何一个数都不能超过1111<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 一个函数，返回某个数对应的火柴数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">0</span>;    <span class="comment">// 用来计数的变量</span></span><br><span class="line">    <span class="comment">// 用一个数组来记录0-9每个数字需要用多少根火柴棍</span></span><br><span class="line">    <span class="keyword">int</span> f[<span class="number">10</span>] = &#123;<span class="number">6</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">6</span>&#125;;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        num += f[x % <span class="number">10</span>];</span><br><span class="line">        x /= <span class="number">10</span>;</span><br><span class="line">    &#125; <span class="keyword">while</span> (x);</span><br><span class="line">    <span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a, b, c, m, sum = <span class="number">0</span>; <span class="comment">// m为火柴棍的个数，sum是等式成立数量</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; m;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (a = <span class="number">0</span>; a &lt;= <span class="number">1111</span>; a++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (b = <span class="number">0</span>; b &lt;= <span class="number">1111</span>; b++)</span><br><span class="line">        &#123;</span><br><span class="line">            c = a + b;</span><br><span class="line">            <span class="keyword">if</span> (fun(a) + fun(b) + fun(c) == m<span class="number">-4</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="string">'+'</span> &lt;&lt; b &lt;&lt; <span class="string">'='</span> &lt;&lt; c &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">                sum++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"一共可以拼出"</span> &lt;&lt; sum &lt;&lt; <span class="string">"个不同的等式"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>枚举</tag>
      </tags>
  </entry>
  <entry>
    <title>11-24</title>
    <url>/2019/11/24/11-24/</url>
    <content><![CDATA[<p>这的确很难，但还是要向前看</p>
<p>蜕下这层皮，会长出新肉</p>
]]></content>
      <categories>
        <category>growth record</category>
      </categories>
      <tags>
        <tag>技术之外的东西</tag>
      </tags>
  </entry>
  <entry>
    <title>NexT主题添加一些特效</title>
    <url>/2019/11/18/NexT%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E4%B8%80%E4%BA%9B%E7%89%B9%E6%95%88/</url>
    <content><![CDATA[<h3 id="设置动态背景"><a href="#设置动态背景" class="headerlink" title="设置动态背景"></a>设置动态背景</h3><ul>
<li>主题配置文件内置4种特效，设置成ture就行。<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Canvas-nest</span></span><br><span class="line"><span class="attr">canvas_nest:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># three_waves</span></span><br><span class="line"><span class="attr">three_waves:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># canvas_lines</span></span><br><span class="line"><span class="attr">canvas_lines:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># canvas_sphere</span></span><br><span class="line"><span class="attr">canvas_sphere:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="添加点击爱心效果"><a href="#添加点击爱心效果" class="headerlink" title="添加点击爱心效果"></a>添加点击爱心效果</h3><ol>
<li>在<code>/themes/next/source/js/src</code>下新建文件 clicklove.js，把如下代码粘贴到clicklove.js文件中：<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">!<span class="function"><span class="keyword">function</span>(<span class="params">e,t,a</span>)</span>&#123;<span class="function"><span class="keyword">function</span> <span class="title">n</span>(<span class="params"></span>)</span>&#123;c(<span class="string">".heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: '';width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;"</span>),o(),r()&#125;<span class="function"><span class="keyword">function</span> <span class="title">r</span>(<span class="params"></span>)</span>&#123;<span class="keyword">for</span>(<span class="keyword">var</span> e=<span class="number">0</span>;e&lt;d.length;e++)d[e].alpha&lt;=<span class="number">0</span>?(t.body.removeChild(d[e].el),d.splice(e,<span class="number">1</span>)):(d[e].y--,d[e].scale+=<span class="number">.004</span>,d[e].alpha-=<span class="number">.013</span>,d[e].el.style.cssText=<span class="string">"left:"</span>+d[e].x+<span class="string">"px;top:"</span>+d[e].y+<span class="string">"px;opacity:"</span>+d[e].alpha+<span class="string">";transform:scale("</span>+d[e].scale+<span class="string">","</span>+d[e].scale+<span class="string">") rotate(45deg);background:"</span>+d[e].color+<span class="string">";z-index:99999"</span>);requestAnimationFrame(r)&#125;<span class="function"><span class="keyword">function</span> <span class="title">o</span>(<span class="params"></span>)</span>&#123;<span class="keyword">var</span> t=<span class="string">"function"</span>==<span class="keyword">typeof</span> e.onclick&amp;&amp;e.onclick;e.onclick=<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;t&amp;&amp;t(),i(e)&#125;&#125;<span class="function"><span class="keyword">function</span> <span class="title">i</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">var</span> a=t.createElement(<span class="string">"div"</span>);a.className=<span class="string">"heart"</span>,d.push(&#123;<span class="attr">el</span>:a,<span class="attr">x</span>:e.clientX<span class="number">-5</span>,<span class="attr">y</span>:e.clientY<span class="number">-5</span>,<span class="attr">scale</span>:<span class="number">1</span>,<span class="attr">alpha</span>:<span class="number">1</span>,<span class="attr">color</span>:s()&#125;),t.body.appendChild(a)&#125;<span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">var</span> a=t.createElement(<span class="string">"style"</span>);a.type=<span class="string">"text/css"</span>;<span class="keyword">try</span>&#123;a.appendChild(t.createTextNode(e))&#125;<span class="keyword">catch</span>(t)&#123;a.styleSheet.cssText=e&#125;t.getElementsByTagName(<span class="string">"head"</span>)[<span class="number">0</span>].appendChild(a)&#125;<span class="function"><span class="keyword">function</span> <span class="title">s</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span><span class="string">"rgb("</span>+~~(<span class="number">255</span>*<span class="built_in">Math</span>.random())+<span class="string">","</span>+~~(<span class="number">255</span>*<span class="built_in">Math</span>.random())+<span class="string">","</span>+~~(<span class="number">255</span>*<span class="built_in">Math</span>.random())+<span class="string">")"</span>&#125;<span class="keyword">var</span> d=[];e.requestAnimationFrame=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;setTimeout(e,<span class="number">1e3</span>/<span class="number">60</span>)&#125;&#125;(),n()&#125;(<span class="built_in">window</span>,<span class="built_in">document</span>);</span><br></pre></td></tr></table></figure></li>
<li>在<code>\themes\next\layout\_layout.swig</code>文件末尾添加：<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 页面点击小红心 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"/js/src/clicklove.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>NexT配置</tag>
      </tags>
  </entry>
  <entry>
    <title>使用NexT主题遇到的坑</title>
    <url>/2019/11/18/%E4%BD%BF%E7%94%A8NexT%E4%B8%BB%E9%A2%98%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/</url>
    <content><![CDATA[<h3 id="菜单栏显示与连接问题"><a href="#菜单栏显示与连接问题" class="headerlink" title="菜单栏显示与连接问题"></a>菜单栏显示与连接问题</h3><p>昨天晚上发现，自己的菜单栏图标显示有问题，但若在/next的_congfig.yml文件下按照官方document那样设置，图标确实能正常显示。但是，发现点进某一个选项链接会出现Cannot GET /home/%20/这样的错误。<br>找了两小时bug，无奈上床准备休息睡觉。睡前刷一会知乎，搜到这个问题，发现居然是配置的时候多了空格，%20也就是空格的意思。阿，感谢知乎！<br>如下为正确配置方式，在/next/_config.yml文件下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/||home</span></span><br><span class="line">  <span class="attr">about:</span> <span class="string">/about||user</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">/tags||tags</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="string">/categories||th</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">/archives||archive</span></span><br><span class="line"><span class="comment">#  schedule: /schedule||calendar</span></span><br><span class="line"><span class="comment">#  sitemap: /sitemap.xml || sitemap</span></span><br><span class="line"><span class="comment">#  commonweal: /404/ || heartbeat</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Enable/Disable menu icons.</span></span><br><span class="line"><span class="attr">menu_icons:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>不要有空格！不要有空格！！不要有空格！！！</p>
<h3 id="旁注栏post链接错误"><a href="#旁注栏post链接错误" class="headerlink" title="旁注栏post链接错误"></a>旁注栏post链接错误</h3><p>旁注栏的post与菜单栏的Archives图标不相容bug</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>踩坑记</tag>
      </tags>
  </entry>
  <entry>
    <title>关于我</title>
    <url>/2019/11/17/%E5%85%B3%E4%BA%8E%E6%88%91/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="enter password" />
    <label for="hbePass">enter password</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="d8f61471154fd0e1626d339b81eea882a5273331cc68f05cd3db424d1967a8be">3b5e622537bcd34cbe0cce8e753a2d5e1e9a9543bd85669171f7ce177fcf9e32b1e3f837f6d5c6f26bab8e28cb5cb5ed258e0db62106f9237a5722d8684a6a88bbe2e013c19bcb80146255c4ea0b0cb3c09f0d3103a908be7d780c016bf3c2f5723f1f86a75ff9ecfeea0584a4d4e7fd5e02a5bec17eea88d22afa6e2e66f31bb538d2107888d655a5ccf6b38e6551c9766f0f2637f29e5877230b5e26cf95c5fd71521b0054c8ce5036cd6cd9a4579856b846ba2a5570fadb6a9e58915305c815defcc8e19d555e0c42b75c633c5ee5628e1f8add04a1e8db894d843ad8a61c53dc144ccdbfffb6d6632195f2c00d5a395f118d888665761bae5b17cc9ebf34053f98216dea5d07419c396c9cdb4a94b348900e2b8d26c314b94976d74e65d7e40b02c518e77e59379ac998c97f84060b02516623d4439359ae89e1ecf9b08e98c507458c5e69bd6abef478010607250707ae31c3676c95192368a53434c76c89c2269f343296160924a1dab8c19f2a04d865d44d0f488ade03665e6b36488b854f717e35e64565170728d89250ac886b9abd310f10fcc046cfcda90a3805ba1b737e1fb42793071ccb7af4cf660dfe564253e7ae60fbd92fabb0ef3717f2e84e1197e7db0718568c320e6ab4ad340baf04d7028716cc474e8aa6808d2da98fc23340247b63f80d18836a0bd2624df1bf6d5011c3d7e11d52bf7155a22b986f5794eec66aeae648b1d5e859a4dc6f2aec7d2664b2cef4afa013ced69f83cbf2f498bc411ce18b6f7355704f02f7faf1dc04b937a4731ccc91fc80f6a8f2b9be01322c49b949e8f8fc9c81bd9244c6e25f00adc0eaa588f88725b6590e0994a289803b5f5c1a55b902e51a5828d23432f555f903724e3a34d43328497c0a289bda5a59652ca02a8667fb7af3de6c77a8c71b1cbea9cc1e66c9f539acfa81dd4612c25db4f470b43e81c5dc78a93ff3b2778168ce941815af86b5e4d6fb08081c4734626ecf3851556905bdd247ed7ede4e6d41a894f98a4eb2d71face49d8bc82999fda7b69a0d6bfcde30ab9af947b14cc762b05bd6c225bcf345b0457a9076b96873303ed1044f27fe93dca14282c09eb7a8e824263a976540345eb3c35a6b4b1eba9a3f52cc5dc434daf7796fbc2b50a0cc374616e59fbb68fad21b65f3a4027608b5d10a60418d26de593997865d4ec1164963a21418bdb7dda0f152fc34467c8ed08fd347367edef12788474fccb289921220ff03bf651a26ddac9f7c4b66786127f3adba9f789fcfc2cc8a9b1870e256323c3bb57295c00646b1bf6d83b02652ad3dc0bfb9b1ec63e226506c62d61e28feedfd95a2282ae8babae478d7214e45f47db60f5f4630ce7f3f3195c67494cb4f08f379ffe241712641d8550a0733454015768c0d882859d362ce8e234a153d3ddb0124d5c92c6f2d8c0288c499277a46d106c9aac83550013402a8f27fa0a478adec4b09f08df1a9a8a42ff02b4e3d7ad0d1947adbbee1df2b6f8a6a9ed9ecc9e67f2d5d32b19b46007171ff8cfba8baff3edcb105ea68cd37716cc9f4c1bb523bec8771b0bfdecc423b53822d07feef6e5c0c1ba7734b6db30c2252a761a20dc887888887d516890c1c9f1e15227ee97e8fe1e9421c193e291cd1a66326e1e50d95d43ca059413d97990dca7dd9a568c080d23c3aa3f11b1ff7453346584865c307a2950ba7a025492da00cd7a0d9907353c5a1947df35b2ca78c8178648265c17269f339ec494e66f3d3ae85693808ea2c56a7903cac03f8b9296f5e86b89ba846ffbf7f033778550808f579d8f43f422281c516095351b4a4e4bbd333cb624d419d6551e0a875c5313e5464805a115575c52409f4696500c55b8594d578937af8ee6328bcaf7c1dd5dec177a99de091a546b0e734d0808eb96b3bcc6fa4a265af7c3e7cf9314b507281dcd620fed9ea8c77b820cc7f660f6fc5d3264555597ea726052c252333c6cf3d34ddb8b7a6b9afa7b9ca73896ee1d6f43b33e598c4d0f7ead66caf14dd8de8bc2eac78944cafb3dc25027f6657d5bd104e9e23cb928024d30f719be931ce10f434f742b22c17029faeb89cbef8d7a09ab95dc4181928a064297d5327e19f91812a4a835005313afa1c0e5aca3981cf08dd1d4c184d2b74f4887d679a46c63a0d1e5672388812a098e461fb880aa3f85f643e8cf16b7d349d5622ecd7436996722828bcc1cebf893cf59b9c99ffdf0a39066ac9e8e394446c65ea24f981d11b59cd431aef723a7f454e34714c51e0143d62752734660c6843ae04afaec7a420c23410466383a6c901840fdf38a130aeddda2251a30d52fe675baa920dc434f7227273bd19af821af1c63762ad4d0eeb57fd37fc0e404d85a1ab737d57aec298c8a31e44ae7616de5edffd5050463124e3d9147009a263cc36d6bfe62d4b3f11463dc9601dd1a5d4612f6d29f01489415d30797beabebf45998da96632fd50b127982093332a4a597fff3773c7fcaf1485e344f00fed2ceb09d20d0ed338e29d32b4ee3b702e1180932131ce48e4c5c26b07c6c4eb0d34a1dcfa2889d34171439a581aa359b7da0a3357110632f1b28760381df1c78da2637d8dcdc2cf42dd2ea74346ad196470dd23990c8616826472e35119737fa44dababa4bdd55d24ffd78f3d89c9132ae976d8854ff41ca20f9908b7bd309fd371dbd6bf4db7ce7d21af2bdf24151cf8dacf07be933b91b9fb22acef4ab23c07fac129aebfce046ad5cea2d0a187c9b1348c562b3d3d6dccad5d48063030db1825e657e725949d1c72a747753456e621cd5726463cbec73c46b28f095d37394b594c5f02280a98bd591f4eaef6fd0f2eaa6d2f51a2ecf0af19313b94cc5b6718a03c7f6a456cc225adc27d15a72d110c6008b32481d25cde62656b74c5d9032f9253b56e75458957e7b139c0c66580c3c805ef80d91b2ce9b4a043e9391f83cc5cb37b459ae770ada0bef84266e9c2eec0eb2bb1d23e37ecf2b308ce6118f1c0e82d3962202d14f02b07d28c1f43e58d6e28a1c8c06d539b02f8fa35ae0be4207a5855a8ed96f10050c16fb4b9b9be5790bf666b4823cf7a28ed5a7a8986bd1defe6225a7dec10b5f3e847072880527d5af708a3f3d71522db6990515696263934ee6888f74da39313f5463143481a0b6a032f5c50fe9be64bd16be512c9540a90508d6557e569b99ce0407d8848f49e6bdfab2b8402840c3a2cfe517b19e9990a5f24f66ca51d9d67be003dd5b6d616f1a749424fa83bdfe451908057766e75798abe4eff9740413901840bc2dd27ca77a46262d830fb1b4b0a27418cf2679756cb9d7ee1ee8f259a07fb76da437bf31d0defa275d99bbffcf9d371b8e69faa6ab286febc5fd17386c84da31fc7ef27a209b74486f0c4e6de5e172a4ac378d0243a9db36d0fc43288041f0a31527c923746bcb634a99f2c9244ee166aaa68194292adc84606672b034eb29d8f5d99c09a7f8b76537040fa41c8150b12abc65f1ca79b02701926c0b4c0a9a78fba2a13ca1ef9798031c6c6092fc0aea901a54120fb0a712d7fc276a4f52df5127f40b711b372cbe9f9e8cd94932ea81fccef7f3636aa56c63ae72b7166f3fe6888dd3d0996311ff38b27428b7b795d7113baa01a7240815cdc03aa57774099989148c2159d260b9fa6353a630410d980102862cdf144f4cc6bf03fad8c73e7d9d9ce18308891bc4ef4fa576265a76586b061bc481b7c2f237a014f8d895404228bfd622872358b9beda2cf36891a2aaec0501adbc219ec0ec8fcfcc2e8e94e524db1b34f258e970cee91db0b1d3c205b97b9755acc76410701dd5aadf7eee4a08a1bd381938bd59624fc7dd6f222367ea0bc4cc76745e3a678f5afc6b7c3f9dc9261aabc696b65f3fed3e37a4857084f286dc5b53be71de56bdec1bf5b7bbf4265acc32d06fb95ab75b409d0c25a30dba5c75cbceb2421268bce87733fcb06ad3672ace6adaebfa52ef00a8fd392dc3e33ca76c922a60c7567752543d2a151fbced49671e8cdfeb81f600f99b06491eb6c1775f8972f662140630a04658484437fef50aebcdae7399740289a56fdd72da8174f150360209a5e5018e615f6b03d680bd0312dbf366ba12aa0bd091856033ee0c7a5cd1592b1af4cdd63fc2b74c2cf7dfefd4a4a8f8c72ea9967392a7418e0e1a1cc62bf914558da9579490a0ee791014747403d9067e36ab32c39848a251cc4a332c4e44f181ddabc655f56bfe66ba27f3ae9261456d7287f02d34e5e9e7604c66357bb435413ac1f40dd800e31a92344c3795d67b5b1f12c2fd155f82e8a5536fd16986a15926b5f65902c74210b73c73d302baa3538659e15ee079d7b30adad50b2cda68db3358aacc2445c25054f69ea406171d4b1e03d2c1451cd44a1a6aa7c7e30ae96d5ed718065ae0a83d8b265067f5f2799ac974e4ab3af57dab33405b4da4abe81206f51b4ed0ce0d015facfdc6c6342aea0238da599503e62ffb07f7851eec95b644e17609b623c92f6d24969ef05c250cb287b241d6e8ebc4ac9b23b0a9aada4b326a4fe3ddef32ae9fb882d0ac0c4f8e3896f5bae3e1789ab2ff9e22865901f0a21ed6d8047c0c2a70d1dd82150ec1c068b61efab3ef766fa935e0125ac16f0fdb54306bca09ad62f24c94bf96ab0580aa82f377660163fbbe988bda456528f406d4d3bad9d6f076a6786d75e414441410cd988a95a077347711fe1ead603d930ceae0661b1ff05f1855b1c83710740c221bee94652c12126d116302cc4c51472666e1ab473789aab0e55e2664d0bd9b1bc2ca5439a52ec3dda86a8a94ab2c45b3979975162d7a215f93426415b53d6d3d86048f0016cc729ed9171a879ca432ec2f48ffff5df0840fa1f45521c8c7745d13bb85ad5f5d02d26ab1e291e4de6ac033118c5a7789fa135038e45acf28a01dd8ca1166275482a5b7f21eb0fd94e23c977ece7364c6f289274ec18f360440bfa11c4d0bc26e7d45c624059540931f97242ba9733104453473e2f1cd7b6d69e677438fe013359ee6f0f41a65c90394201de323f2987b49d57eb697be892df8b3349229af5a05e0621dda1b72803f11552dfe6644e53905ae5e41209195a2ebb5e4f0c00670192b82843fd629527628816eb85db30d46f4f5c8cac80648488102a593333d2aadb245f15ea0b771a31d59a92d7efb2d2493242cfb48da54be8ae14e8ddb57f1554d1b237391c05873246b07c49e6418315e1b446825af328aa82cffa0da3290902ba775ceda94625a02d96058fd0fcefc222bed91324bb83c036677ff6137b17da958816ba19049a8fd14ff5e0a1d4f1c872416aa1904e629f53374f935a132b8c5759f813a4d65a6a291e1bc877b4afb8a2320e3581ebe9fe3ac640255a1e177ca6a5b888d4ed35db0df78807275736f067772bb264e583ac9ab119410cc0ea1d43cbd4c0ea26bd9c542746662c71d05c7b6917ac84302e73d0289f1aa6fd6a18308805f6d2de0427b5d2f85a433fe674839bcf0f5b9bded2e595dc4dbccb080246267f933d848765245a12198fe1854a1ba2658d9f43aafac787499ba6fa6304501c22c8f96b5ba2c5c44b058c8ecf7f83f22c6d5b870fe3f8bedf6c007136dbd2aca00fbb98a6e58fea805974291d</script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>growth record</category>
      </categories>
      <tags>
        <tag>技术之外的东西</tag>
      </tags>
  </entry>
</search>
